<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>متابعة كورسات (Firebase)</title>

<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore-compat.js"></script>

<style>
  /* --- Base Styles (No Change) --- */
  :root{
    --bg:#0f172a; --card:#111827; --muted:#1f2937;
    --accent:#3b82f6; --accent2:#22c55e; --warn:#f59e0b;
    --danger:#ef4444; --text:#e5e7eb; --sub:#cbd5e1;
    --warn-rgb: 245, 158, 11;
  }
  *{box-sizing:border-box}
  body{ margin:0; background:linear-gradient(180deg,#0b1226,#0f172a 50%,#0b1226); color:var(--text); font-family:"Tajawal",system-ui,Arial; font-size:18px; padding-top: 80px; }
  header{ position:fixed; top:0; right:0; left:0; z-index:50; background:rgba(15,23,42,.85); backdrop-filter:blur(8px); border-bottom:1px solid #1e293b; padding: 12px 0; height: 80px; }
  .header-container { max-width:1200px; margin:auto; padding:0 16px; display: flex; justify-content: space-between; align-items: center; gap: 16px; }
  h1{ margin:0; font-size: 22px; white-space: nowrap; }
  .welcome-message { color: var(--warn); font-weight: bold; margin-right: 10px; font-size: 16px; }

  .container{max-width:1200px; margin:auto; padding:16px;}
  .subject-selector-container { display: flex; gap: 8px; align-items: center; flex-grow: 1; max-width: 500px; }
  .subject-selector-container select { flex-grow: 1; padding: 8px 12px; font-size: 14px; }
  #addSubjectBtn { padding: 8px 12px; min-width: 40px; font-size: 16px; flex-shrink: 0; }
  .kpis{display:flex; gap:10px; flex-wrap:wrap; margin-top:10px}
  .kpi{background:#0c1a2e; border:1px solid #173457; padding:8px 12px; border-radius:10px; font-size:16px; text-align: center;}
  .progress-stack { display: grid; gap: 8px; margin-top: 12px; }
  .progress-label { font-size: 14px; color: var(--sub); }
  .bar{height:12px; background:#0b1220; border-radius:999px; overflow:hidden; border:1px solid #1f2a40}
  .bar > span{ display:block; height:100%; background:linear-gradient(90deg,var(--accent),var(--accent2)); width:0%; transition: width 0.3s ease; }
  #blueprintBar > span { background:linear-gradient(90deg,var(--warn), #f00); }
  .toolbar{display:flex; gap:10px; flex-wrap:wrap; margin-top:12px}
  button, select { background:linear-gradient(180deg,#0f2a4a,#0a1f3b); color:#dbeafe; border:1px solid #1e3a5f; padding:10px 14px; border-radius:10px; cursor:pointer; font-weight:700; font-size:16px; font-family: inherit; }
  button.secondary{background:#121a2b; color:#cbd5e1; border:1px solid #263146}
  button.danger{background:#2a0f16; border-color:#5f1e29; color:#fecaca}
  button.warn{background:#3f2c0a; border-color:#854d0e; color:#fef3c7}
  .cards{ display:grid; grid-template-columns:1fr; gap:16px; margin:16px auto; }
  .card{ background:linear-gradient(180deg,#0f172a,#0c142a); border:1px solid #18243a; border-radius:18px; box-shadow:0 10px 30px rgba(0,0,0,.25), inset 0 1px 0 rgba(255,255,255,.02); padding: 0; }
  .card-header { padding: 16px; cursor: pointer; display: flex; justify-content: space-between; align-items: flex-start; gap: 16px; flex-wrap: nowrap;}
  .card-header:hover { background: rgba(255,255,255,0.03); }
  .card h2{margin:0; font-size:22px; flex-grow: 1;}
  .card-header .chapter-weight { font-size: 20px; font-weight: 700; color: var(--warn); flex-shrink: 0; }
  .card-content { padding: 0 16px 16px; display: grid; gap: 8px; display: none; }
  .row{ display:grid; grid-template-columns: auto auto 1fr auto auto auto; gap: 10px; align-items:center; padding:10px; border-radius:12px; border:1px solid #1a2742; background:#0b1527; font-size:16px; transition: all 0.2s ease; }
  .row.done{border-color:#1f3f2a; background:#0c1f14} .row.partial{border-color:#3a3214; background:#1c1609}
  .star-btn { background: none; border: none; color: var(--sub); font-size: 22px; cursor: pointer; padding: 0 5px; grid-column: 1; }
  .star-btn.active { color: var(--warn); }
  .row .lecture-weight { grid-column: 2; font-size: 14px; font-weight: 700; color: var(--warn); border-left: 2px solid var(--muted); padding-left: 10px; }
  .row .title{ font-weight:700; grid-column: 3; }
  .snooze-btn { grid-column: 4; background: var(--muted); color: var(--sub); border: 1px solid #2e3d55; padding: 6px 8px; border-radius: 8px; font-size: 16px; cursor: pointer; }
  .row label.chip { grid-column: span 1; }
  .row.snoozed { opacity: 0.4; background: #1a202c; } .row.snoozed .title { text-decoration: line-through; }
  .row.snoozed .snooze-btn { background: var(--warn); color: #000; border-color: var(--warn); }
  .chip{ display:inline-flex; align-items:center; gap:8px; background:#072437; color:#c3e4ff; border:1px solid #0b4a70; padding: 6px 10px; border-radius: 8px; font-size:14px; }
  .chip input{transform:scale(1.2); margin-right: 4px;}
  .modal-back{position:fixed; inset:0; background:rgba(2,6,23,.75); backdrop-filter:blur(6px); display:none; align-items:center; justify-content:center; z-index:100;}
  .modal{width:min(900px,92vw); max-height:80vh; overflow:auto; background:#0a1221; border:1px solid #1a2742; border-radius:16px; padding:16px;}
  .modal h3{margin:0 0 8px; font-size:22px} .divider{height:1px; background:#1d2a44; margin:12px 0}
  .footer{color:#9fb3ca; font-size:14px; margin:32px 0 16px; text-align: center; line-height: 1.6;}
  .footer a { color: var(--accent); text-decoration: none; } .footer a:hover { text-decoration: underline; }
  .form-group{margin-bottom:12px;} .form-group label{display:block; margin-bottom:4px; font-size:16px; color:var(--sub);}
  .form-group input, .form-group textarea, .form-group select{ width:100%; background:#0b1527; border:1px solid #1a2742; color:var(--text); padding:8px 12px; border-radius:8px; font-size:16px; }
  .form-group input[type="date"] { padding: 7px 12px; } .form-group textarea{ min-height: 150px; resize: vertical; }
  .planner-container { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px; justify-content: center; }
  .planner-box { background: #0c1a2e; border: 1px solid #173457; border-radius: 10px; padding: 12px 16px; flex-grow: 1; text-align: center; min-width: 150px; position: relative; }
  .planner-box.clickable { cursor: pointer; transition: background-color 0.2s ease; } .planner-box.clickable:hover { background: #173457; }
  .planner-box .label { font-size: 14px; color: var(--sub); margin-bottom: 4px; display: block; }
  .planner-box .value { font-size: 24px; font-weight: 700; color: var(--text); }
  .status-info-icon { font-size: 14px; color: var(--sub); margin-right: 5px; cursor: help; }
  .status-danger { border-color: var(--danger); background: #2a0f16; } .status-danger .value { color: var(--danger); }
  .status-good { border-color: var(--accent2); background: #0c1f14; } .status-good .value { color: var(--accent2); }
  .status-warn { border-color: var(--warn); background: #2a210f; } .status-warn .value { color: var(--warn); }
  .date-picker-hidden { position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer; border: none; }
  #mainAppContent { display: none; } #userSection { display: none; align-items: center; gap: 10px; }
  #userImg { width: 40px; height: 40px; border-radius: 50%; border: 2px solid var(--accent); }
  #userName { font-size: 14px; font-weight: bold; } #logoutBtn { font-size: 14px; padding: 6px 10px; }
  #loginBtn { display: block; }
  #aboutModal .modal-content { line-height: 1.7; }
  #aboutModal .modal-content h4 { color: var(--warn); margin-top: 1.5em; margin-bottom: 0.5em; }
  #aboutModal .modal-content ul { padding-right: 20px; }
  #aboutModal .modal-content code { background: var(--muted); padding: 2px 6px; border-radius: 4px; font-size: 0.9em; }
  .chapter-progress-container { width: 100px; height: 8px; background: #0b1220; border-radius: 999px; overflow: hidden; border: 1px solid #1f2a40; }
  .chapter-progress-bar { height: 100%; background: linear-gradient(90deg, var(--warn), #ffcc33); width: 0%; transition: width 0.3s ease; }
  .search-container { margin: 16px 0; }
  #searchInput { width: 100%; padding: 12px 16px; font-size: 16px; background: #0c1a2e; border: 1px solid #173457; border-radius: 10px; color: var(--text); }
  .row.highlight { background-color: rgba(245, 158, 11, 0.2); border-color: var(--warn); }
  #starredModal .card { margin-bottom: 12px; padding: 16px;}
  #starredModal .row { grid-template-columns: auto 1fr auto; gap: 15px;}
  #starredModal .completion-status { font-size: 14px; color: var(--sub); text-align: left;}
  #starredModal .completion-status.done { color: var(--accent2); }
  :root { --warn-rgb: 245, 158, 11; }
  #clockDateContainer {
    display: flex;
    gap: 10px;
    align-items: center;
    color: var(--sub);
    font-size: 14px;
    margin-right: auto;
    margin-left: 16px;
    white-space: nowrap;
  }
  #liveClock {
    font-weight: 700;
    color: var(--text);
    background: var(--muted);
    padding: 4px 10px;
    border-radius: 6px;
    font-size: 16px;
    letter-spacing: 1px;
  }
  #liveDate {
    font-size: 12px;
  }
  @media (max-width: 600px) {
    #clockDateContainer { display: none; }
  }
  .chapter-stats {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    font-size: 12px;
    color: var(--sub);
    margin-top: 10px;
    justify-content: flex-end;
  }
  .chapter-stats .stat-item {
    background: #0b1527;
    border: 1px solid #1a2742;
    padding: 2px 6px;
    border-radius: 6px;
  }
  .chapter-stats .stat-item span {
    font-weight: 700;
    color: var(--text);
  }
</style>
</head>
<body>

<header>
  <div class="header-container">
    <div style="display: flex; align-items: center; gap: 16px;">
        <h1 id="headerTitle">متابعة كورسات</h1>
        <span class="welcome-message">مرحباً</span>
    </div>
    <div id="clockDateContainer">
        <span id="liveDate"></span>
        <span id="liveClock"></span>
    </div>
    <div id="authSection" style="display: flex; align-items: center; gap: 10px; flex-shrink: 0;">
        <div id="userSection"> <img id="userImg" src="" alt="User"/> <span id="userName"></span> <button id="logoutBtn" class="secondary">خروج</button> </div>
        <button id="loginBtn" class="warn">تسجيل الدخول</button>
    </div>
  </div>
</header>

<main class="container" id="mainAppContent">
  <div class="subject-selector-container"> <select id="subjectSelector"></select> <button id="addSubjectBtn" class="warn">+</button> </div>

  <div class="planner-container">
    <div class="planner-box clickable status-warn" id="daysRemainingBox"> <span class="label">الأيام المتبقية</span> <b id="daysRemaining" class="value">-</b> <input type="date" id="datePickerInput" class="date-picker-hidden"> </div>
    <div class="planner-box clickable" id="totalHoursBox"> <span class="label">إجمالي الساعات</span> <b id="totalHours" class="value">-</b> </div>
    <div class="planner-box" id="remainingHoursBox"> <span class="label">الساعات المتبقية</span> <b id="remainingHours" class="value">-</b> </div>
    <div class="planner-box" id="plannerStatusBox"> <span class="label">حالتك <span id="planStatusInfo" class="status-info-icon" title="">❓</span></span> <b id="planStatus" class="value">-</b> </div>
    <div class="planner-box" id="plannerLecturesBox"> <span class="label">المطلوب يومياً (محاضرات)</span> <b id="planLecturesPerDay" class="value">-</b> </div>
    <div class="planner-box" id="plannerHoursBox"> <span class="label">المطلوب يومياً (ساعات)</span> <b id="planHoursPerDay" class="value">-</b> </div>
  </div>

  <div class="progress-stack"> <div> <div style="display: flex; justify-content: space-between;"> <span class="progress-label">إنجاز المحاضرات</span> <b id="globalBarPct" style="font-size: 14px;">0%</b> </div> <div class="bar"><span id="globalBar"></span></div> </div> <div> <div style="display: flex; justify-content: space-between;"> <span class="progress-label">شريط نسبة mcq البلوبرنت</span> <b id="blueprintBarPct" style="font-size: 14px; color: var(--warn);">0%</b> </div> <div class="bar" id="blueprintBar"><span id="blueprintBarSpan"></span></div> </div> </div>
  <div class="search-container"> <input type="search" id="searchInput" placeholder="ابحث عن محاضرة..."> </div>
  <div class="toolbar"> <button class="warn" id="manageDataBtn">إدارة</button> <button class="secondary" id="sortBtn">فرز</button> <button id="showRemaining">المتبقي</button> <button class="warn" id="showStarredBtn">المفضلة ⭐</button> <button class="secondary" id="expandAll">فتح الكل</button> <button class="secondary" id="collapseAll">طيّ الكل</button> <button id="showAboutBtn">شرح</button> </div>
  <div class="kpis" id="globalKpis" style="margin-top:16px"></div> <div class="cards" id="cards"></div>
  <div class="footer"> برمجة وتصميم: علي احمد | للتواصل: <a href="https://t.me/draliturki" target="_blank" rel="noopener noreferrer">@draliturki</a> <br> بياناتك محفوظة سحابياً. </div>
</main>

<div class="modal-back" id="remainingModalBack"> <div class="modal"> <h3>المتبقي</h3> <div id="remainingContainer"></div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="closeRemainingModal">إغلاق</button> </div> </div> </div>
<div class="modal-back" id="addSubjectModal"> <div class="modal" style="width: min(500px, 90vw);"> <h3>إضافة مادة</h3> <div class="form-group"> <label for="newSubjectNameInput">اسم المادة:</label> <input type="text" id="newSubjectNameInput"/> </div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="cancelAddSubject">إلغاء</button> <button id="saveNewSubjectBtn" style="margin-right: 8px;">حفظ</button> </div> </div> </div>
<div class="modal-back" id="manageModalBack"> <div class="modal" id="manageModalContent"> </div> </div>

<div class="modal-back" id="aboutModal">
  <div class="modal">
    <h3>شرح الموقع</h3>
    <div class="modal-content">
        <p>أهلاً بك في متتبع الكورسات!</p>
        <p>هذا التطبيق مصمم لمساعدتك على تنظيم دراستك وتتبع إنجازك بفاعلية.</p>

        <h4>📅 لوحة التحكم (Planner)</h4>
        <ul>
            <li><b>الأيام المتبقية:</b> اضغط على الصندوق لاختيار تاريخ الامتحان.</li>
            <li><b>إجمالي الساعات:</b> اضغط لإدخال الساعات الإجمالية للمادة (يدوياً).</li>
            <li><b>الساعات المتبقية:</b> تُحسب تلقائياً بناءً على الساعات التي تدخلها عند مشاهدة الفيديوهات.</li>
            <li><b>حالتك (❓):</b> يقارن إنجازك (البلوبرنت) بالوقت المنقضي.</li>
        </ul>

        <h4>⚙️ شريط الأدوات</h4>
        <ul>
            <li><b>إدارة:</b> لإضافة دكاترة، محاضرات، أو "إدارة ساعات الفصول".</li>
            <li><b>فرز:</b> لترتيب الجابترات حسب الأهمية (الوزن).</li>
            <li><b>المتبقي:</b> يعرض كل المحاضرات التي لم تكتمل بعد.</li>
            <li><b>المفضلة ⭐:</b> يعرض المحاضرات التي ميزتها بنجمة.</li>
        </ul>

        <h4>📚 المحاضرات والجابترات</h4>
        <ul>
            <li><b>رأس الجابتر:</b> يعرض لك إحصائيات مهمة (عدد المحاضرات، المتبقي منها، وإجمالي ساعات الجابتر، والمتبقي منها).</li>
            <li><b>☆/⭐:</b> لتمييز محاضرة (يتغير شكلها فوراً).</li>
            <li><b>🚫:</b> لتجاهل محاضرة وإخراجها من حسابات التقدم.</li>
            <li><b>🎬 فيديو:</b> عند الضغط لأول مرة، سيسألك عن عدد الساعات لحساب "الساعات المتبقية".</li>
            <li><b>📝 ملزمة:</b> تحديد هذا المربع يعتبر المحاضرة "مكتملة" ويضيفها لنسبة البلوبرنت.</li>
        </ul>
    </div>
    <div class="divider"></div>
    <div style="text-align: left;"> <button class="secondary" id="closeAboutModal">إغلاق</button> </div>
  </div>
</div>

<div class="modal-back" id="starredModal"> <div class="modal"> <h3>المفضلة ⭐</h3> <div id="starredContainer"></div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="closeStarredModal">إغلاق</button> </div> </div> </div>


<script>
// --- Firebase Config & Init (No Change) ---
const firebaseConfig = {
  apiKey: "AIzaSyBizJxYxXnO5u7EIvw6bjfJ3gRbzMJjCdw",
  authDomain: "course-progressing.firebaseapp.com",
  projectId: "course-progressing",
  storageBucket: "course-progressing.appspot.com",
  messagingSenderId: "349314472435",
  appId: "1:349314472435:web:0dd7b5297e02342b4cda86",
};
try { firebase.initializeApp(firebaseConfig); console.log("Firebase Initialized."); }
catch (e) { console.error("Firebase init failed:", e); }
const auth = firebase.auth(); const db = firebase.firestore(); const googleProvider = new firebase.auth.GoogleAuthProvider();

// --- App State (No Change) ---
let currentUser = null; let userId = null; let userDocRef = null;
let appData = {}; let state = {}; let activeSubjectName = null;
let examDate = ""; let totalStudyDays = 0; let isSorted = false;

// --- DOM Elements (No Change) ---
let mainAppContent, userSection, userImg, userName, loginBtn, logoutBtn, cardsEl, subjectSelector,
    daysRemainingEl, daysRemainingBox, datePickerInput, totalHoursEl, totalHoursBox,
    remainingHoursEl, remainingHoursBox,
    plannerStatusBox, planStatus, planLecturesPerDay, globalBar, globalBarPct,
    blueprintBarSpan, blueprintBarPct, headerTitle, addSubjectModal, addSubjectBtn,
    manageModalBack, remainingModalBack, planHoursPerDay, planStatusInfo, aboutModal,
    searchInput, starredModal;

// --- Default Data (No Change) ---
function getDefaultData() {
    return { /* ... */ }; // Same as before
}

// --- Firestore Functions (No Change) ---
async function loadDataFromFirestore() { /* ... */ } // Same as before
async function saveAllDataToFirestore() { /* ... */ } // Same as before
async function saveAppData() { /* ... */ } // Same as before
async function saveProgress() { if (!userDocRef) return; try { await userDocRef.update({ state }); console.log("%cProg svd.", "color: lightblue;", JSON.parse(JSON.stringify(state))); } catch (e) { console.error("Err sv Prog:", e); } } // Added detailed log
async function saveActiveSubject() { /* ... */ } // Same as before
async function saveExamDateAndDays(newD, newTD) { /* ... */ } // Same as before

// --- Calculation Functions (No Change) ---
function isLectureComplete(rec){ return !!rec?.notes; }
function computeGlobal(subName, subData){
    let t = { l: 0, w: 0, dl: 0, dw: 0, sl: 0, sw: 0, v: 0, n: 0, dh: 0 };
    if(!subData || !subData.doctors) return {...t, al:0, aw:0, rl:0, rw:0, p:0, bp:0, vp:0, np:0, doneHours:0};

    Object.entries(subData.doctors).forEach(([dr, ls]) => {
        if (!Array.isArray(ls)) return;
        ls.forEach(l => {
            if (!l || typeof l !== 'object') return;
            const k = `${subName}||${l.chapter}||${l.title}`;
            const r = state[k] || { snoozed: !1 };

            t.l++;
            t.w += (l.weight || 0);

            if(r.video) t.v++;
            if(r.notes) t.n++;

            if(r.snoozed){
                t.sl++;
                t.sw += (l.weight || 0);
            } else {
                // Hour calculation depends on completion (notes check) AND video checkbox state
                if(isLectureComplete(r)){ // Check if notes are done
                    t.dl++;
                    t.dw += (l.weight || 0);
                    // Add hours ONLY if lecture is complete AND video is checked AND duration exists
                    if(r.video && r.videoDuration) {
                        t.dh += r.videoDuration;
                    }
                }
            }
        });
    });

    const al = t.l - t.sl;
    const aw = t.w - t.sw;
    const p = al > 0 ? (t.dl / al) * 100 : 0;
    const bp = aw > 0 ? (t.dw / aw) * 100 : 0;

    console.log(`%ccomputeGlobal Result: doneHours=${t.dh}`, "color: yellow;"); // DEBUG LOG
    return {
        ...t,
        activeLectures: al,
        activeWeight: parseFloat(aw.toFixed(2)),
        remainingLectures: al - t.dl,
        remainingWeight: parseFloat((aw - t.dw).toFixed(2)),
        pct: Math.round(p),
        blueprintPct: Math.round(bp),
        videoPct: al > 0 ? Math.round(t.v / al * 100) : 0,
        notesPct: al > 0 ? Math.round(t.n / al * 100) : 0,
        snoozedLectures: t.sl,
        doneHours: t.dh
    };
}


// --- Rendering Functions (No Change) ---
function renderGlobalHeader(subName, subData, computedGlobal){
    const g = computedGlobal || computeGlobal(subName, subData); // Use passed-in object if available
    console.log(`%crenderGlobalHeader: Using doneHours=${g.doneHours}`, "color: lightgreen;"); // DEBUG LOG
    if(subName){headerTitle.textContent=`متابعة: ${subName}`}else{headerTitle.textContent="متابعة كورسات"}
    globalBar.style.width=g.pct+'%';globalBarPct.textContent=g.pct+'%';
    blueprintBarSpan.style.width=g.blueprintPct+'%';blueprintBarPct.textContent=g.blueprintPct+'%';
    totalHoursEl.textContent=subData?.totalHours?`${subData.totalHours}`:"-";
    try{document.getElementById('globalKpis').innerHTML=`<span class=kpi>الكمية:${g.pct}%</span><span class="kpi status-warn" style="color:var(--warn)">البلوبرنت:${g.blueprintPct}%</span><span class=kpi>الباقي:${g.remainingLectures}/${g.activeLectures}</span><span class=kpi>المتجاهل:${g.snoozedLectures}</span>`}catch(e){/*ignore*/}
}
function render(subName, subData, searchTerm = "") {
    console.log(`%cRendering list...`, "color: orange;"); // DEBUG LOG
    const globalStats = computeGlobal(subName, subData);
    renderGlobalHeader(subName, subData, globalStats);

    const openCardIds = [];
    if (cardsEl) {
        cardsEl.querySelectorAll('.card-content').forEach(contentEl => {
            if (contentEl.style.display === 'grid') {
                openCardIds.push(contentEl.id);
            }
        });
    }

    cardsEl.innerHTML = "";

    if (!subData || !subData.doctors || Object.keys(subData.doctors).length === 0) {
        cardsEl.innerHTML = `<p style="text-align:center;">لا توجد بيانات لهذه المادة.</p>`;
        return;
    }
    const chapters = {};
    const chW = subData.chapters || {};
    Object.entries(subData.doctors).forEach(([dr, ls]) => {
        if (Array.isArray(ls)) {
            ls.forEach(l => {
                if (!l || typeof l !== 'object') { return; }
                const cn = l.chapter || "غير مصنف";
                if (!chapters[cn]) {
                    chapters[cn] = {
                        lectures: [],
                        totalWeight: chW[cn] || 0,
                        lectureCount: 0,
                        lecturesRemaining: 0,
                        hoursDone: 0
                    };
                }
                chapters[cn].lectures.push({ ...l, doctor: dr });
                const k = `${subName}||${cn}||${l.title}`;
                const rec = state[k] || { snoozed: !1 };
                if (!rec.snoozed) {
                    chapters[cn].lectureCount++;
                    if (!isLectureComplete(rec)) {
                        chapters[cn].lecturesRemaining++;
                    }
                    if (isLectureComplete(rec) && rec.video && rec.videoDuration) {
                        chapters[cn].hoursDone += rec.videoDuration;
                    }
                }
            });
        }
    });
    let chA = Object.entries(chapters).map(([n, d]) => ({
        name: n,
        totalWeight: parseFloat(d.totalWeight.toFixed(2)),
        lectures: d.lectures,
        stats: {
            count: d.lectureCount,
            remaining: d.lecturesRemaining,
            hoursDone: d.hoursDone
        }
    }));
    if (isSorted) { chA.sort((a, b) => b.totalWeight - a.totalWeight); }
    let firstMatchElement = null;
    chA.forEach((ch, idx) => {
        let chapterCompletedWeight = 0;
        let chapterActiveWeight = 0;
        let hasVisibleLectures = false;
        const lecturesHTML = ch.lectures.map(l => {
            const k = `${subName}||${l.chapter}||${l.title}`;
            const rec = state[k] || { snoozed: !1, starred: !1 };
            const isMatch = searchTerm && l.title?.toLowerCase().includes(searchTerm.toLowerCase());
            if (searchTerm && !isMatch) return '';
            hasVisibleLectures = true;
            let rcs = "row";
            if (isLectureComplete(rec)) rcs += " done";
            else if (rec.video || rec.notes) rcs += " partial";
            if (rec.snoozed) rcs += " snoozed";
            if (isMatch) rcs += " highlight";
            if (isMatch && !firstMatchElement) { firstMatchElement = { key: k }; }
            if (!rec.snoozed) {
                chapterActiveWeight += (l.weight || 0);
                if (isLectureComplete(rec)) {
                    chapterCompletedWeight += (l.weight || 0);
                }
            }
            const starIcon = rec.starred ? '⭐' : '☆';
            return `<div class="${rcs}" data-key="${k}">
                      <button class="star-btn ${rec.starred?'active':''}" data-action="star" title="تمييز">${starIcon}</button>
                      <span class=lecture-weight>${l.weight || 0}%</span>
                      <div class=title>${l.title}</div>
                      <button class=snooze-btn data-action=snooze title=تجاهل>🚫</button>
                      <label class=chip><input type=checkbox data-action=video ${rec.video?'checked':''}> فيديو</label>
                      <label class=chip><input type=checkbox data-action=notes ${rec.notes?'checked':''}> ملزمة</label>
                    </div>`;
        }).join('');
        if (hasVisibleLectures) {
            const chapterBlueprintPct = chapterActiveWeight > 0 ? Math.round((chapterCompletedWeight / chapterActiveWeight) * 100) : 0;
            const chapterHoursTotal = subData.chapterHours?.[ch.name] || 0;
            const chapterHoursRemaining = Math.max(0, chapterHoursTotal - ch.stats.hoursDone);
            const card = document.createElement('section');
            card.className = "card";
            const cId = `c-${idx}`;
            card.innerHTML = `
              <div class=card-header data-collapse="${cId}">
                <h2>${ch.name}</h2>
                <div style="text-align: left; flex-shrink: 0; max-width: 250px;">
                  <div style="display: flex; gap: 16px; align-items: center; justify-content: flex-end;">
                    <span class=chapter-weight>${ch.totalWeight}%</span>
                    <div class="chapter-progress-container"><div class="chapter-progress-bar" style="width: ${chapterBlueprintPct}%;"></div></div>
                  </div>
                  <div class="chapter-stats">
                    <div class="stat-item">المحاضرات: <span>${ch.stats.count}</span></div>
                    <div class="stat-item">المتبقي: <span>${ch.stats.remaining}</span></div>
                    <div class="stat-item">الساعات: <span>${chapterHoursTotal.toFixed(1)}h</span></div>
                    <div class="stat-item">متبقي: <span>${chapterHoursRemaining.toFixed(1)}h</span></div>
                  </div>
                </div>
              </div>
              <div id="${cId}" class=card-content>${lecturesHTML}</div>`;
            cardsEl.appendChild(card);
            const listEl = card.querySelector(`#${cId}`);
            if(searchTerm || openCardIds.includes(cId)) {
                listEl.style.display = 'grid';
            }
            card.querySelector('[data-collapse]').addEventListener('click', (e) => {
                if (e.target.closest('button,input,label')) return;
                listEl.style.display = (listEl.style.display === 'none' || listEl.style.display === '') ? 'grid' : 'none'
            });
            listEl.querySelectorAll('.row button, .row input').forEach(el => {
                el.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const rowEl = e.target.closest('.row');
                    const title = rowEl.querySelector('.title').textContent;
                    const lectureData = ch.lectures.find(l => l.title === title);
                    if (lectureData) {
                        updateEntry(subName, lectureData, rowEl, el.dataset.action);
                    } else { console.error("Could not find lecture data for event target:", title); }
                })
            });
        }
    });
    if (firstMatchElement) {
        setTimeout(() => {
            const elementToScroll = cardsEl.querySelector(`.row[data-key="${firstMatchElement.key}"]`);
            if (elementToScroll) { elementToScroll.scrollIntoView({ behavior: 'smooth', block: 'center' }); }
        }, 100);
    } else if (searchTerm) {
        cardsEl.innerHTML = `<p style="text-align:center;">لا توجد نتائج بحث.</p>`;
    }
}


/*
=============================================================================
=== ✅ FINAL REVISED LOGIC v3: updateEntry Function ===
1.  Video Action: Ask for duration if missing. Determine requiresPlanUpdate AFTER state update.
2.  Notes Action: Always set requiresPlanUpdate = true.
3.  Snooze Action: Always set requiresPlanUpdate = true.
4.  Added extensive console logging.
=============================================================================
*/
async function updateEntry(subName, lec, rowEl, action){
    const k = `${subName}||${lec.chapter}||${lec.title}`;
    // Clone the current state for reliable comparison later if needed, but primarily work on the reference
    const rec = state[k] || {snoozed:!1, starred: !1, videoDuration: null};
    let requiresPlanUpdate = false; // Assume no update needed initially
    let shouldSave = true; // Assume we should save unless prompt fails/cancels

    console.log(`%c[${action}] START for "${lec.title}"`, "color: magenta; font-weight: bold;");
    console.log(`[${action}] Initial State:`, JSON.parse(JSON.stringify(rec)));

    // --- 1. Perform Action & Update State Object Directly ---
    if(action === 'video'){
        const isChecking = rowEl.querySelector('[data-action=video]').checked;

        // Prompt logic (only if checking and duration is missing)
        if (isChecking && (rec.videoDuration === null || rec.videoDuration === undefined)) {
            const durationInput = prompt(`كم ساعة استغرق فيديو "${lec.title}"؟`, "");
            if (durationInput !== null) { // Not cancelled
                const duration = parseFloat(durationInput);
                if (!isNaN(duration) && duration > 0) {
                    rec.videoDuration = duration;
                    rec.video = true; // Apply state change only if duration is valid
                    console.log(`[${action}] Duration entered: ${duration}`);
                } else { // Invalid or empty input
                    alert("أدخل رقم صحيح (مثل 1.5).");
                    rowEl.querySelector('[data-action=video]').checked = false; // Revert UI immediately
                    rec.video = false; // Ensure state remains false
                    shouldSave = false; // Don't save this attempt
                    console.log(`[${action}] Invalid duration input.`);
                }
            } else { // User cancelled prompt
                rowEl.querySelector('[data-action=video]').checked = false; // Revert UI immediately
                rec.video = false; // Ensure state remains false
                shouldSave = false; // Don't save this attempt
                console.log(`[${action}] Duration prompt cancelled.`);
            }
        } else {
             // Duration exists or user is unchecking. Update state directly.
             rec.video = isChecking;
        }

        // Determine if update needed AFTER state is potentially modified
        if (rec.notes) { // Check notes state directly *after* potential video state change
             requiresPlanUpdate = true;
             console.log(`[${action}] requiresPlanUpdate = true (because notes is true)`);
        } else {
             console.log(`[${action}] requiresPlanUpdate = false (because notes is false)`);
        }

    }
    else if(action === 'notes'){
        rec.notes = rowEl.querySelector('[data-action=notes]').checked;
        requiresPlanUpdate = true; // Always update when notes change
        console.log(`[${action}] requiresPlanUpdate = true (always for notes)`);
    }
    else if(action === 'snooze'){
        rec.snoozed = !rec.snoozed;
        requiresPlanUpdate = true; // Always update when snooze changes
        console.log(`[${action}] requiresPlanUpdate = true (always for snooze)`);
    }
    else if(action === 'star'){
        rec.starred = !rec.starred;
        const starBtn = rowEl.querySelector('.star-btn');
        if(starBtn) {
            starBtn.classList.toggle('active', rec.starred);
            starBtn.textContent = rec.starred ? '⭐' : '☆';
        }
        console.log(`[${action}] requiresPlanUpdate = false (only starring)`);
        // Starring doesn't affect plan calculation
    }

     console.log(`[${action}] State after action:`, JSON.parse(JSON.stringify(rec)));
     console.log(`[${action}] Should Save: ${shouldSave}`);
     console.log(`[${action}] Requires Plan Update: ${requiresPlanUpdate}`);

    // --- 2. Save Block ---
    if (shouldSave) {
        state[k] = rec; // Assign potentially modified rec back to the main state object
        try {
            await saveProgress(); // Save the updated state to Firestore
            console.log(`[${action}] Firestore save successful.`);
        } catch (e) {
             console.error(`[${action}] Firestore save failed:`, e);
             // Optionally revert UI changes if save fails? Or notify user?
        }
    } else {
         console.log(`[${action}] Firestore save skipped.`);
         // Need to ensure UI reflects the actual state if save was skipped (e.g., checkbox reverted)
         if (action === 'video') {
             rowEl.querySelector('[data-action=video]').checked = rec.video; // Explicitly set UI back
         }
    }


    // --- 3. UI Update Block (Row Appearance) ---
    // Update row colors based on the final state, except for star action
    if(action !== 'star') {
        rowEl.classList.remove('done','partial','snoozed');
        if(isLectureComplete(rec)) rowEl.classList.add('done'); // Depends only on final rec.notes
        else if(rec.video || rec.notes) rowEl.classList.add('partial'); // Depends on final rec.video/rec.notes
        if(rec.snoozed) rowEl.classList.add('snoozed'); // Depends on final rec.snoozed
        console.log(`[${action}] Row classes updated.`);
    }

    // --- 4. Plan Update Block (Re-render if necessary) ---
    if(requiresPlanUpdate && shouldSave){ // Only update if needed AND save occurred
        console.log(`[${action}] --> Triggering Re-render & Plan Update`);
        const actSub = activeSubjectName;
        render(actSub, appData[actSub], searchInput ? searchInput.value : "");
        updateDynamicPlan();
    } else {
         console.log(`[${action}] --> Re-render & Plan Update SKIPPED (requiresPlanUpdate=${requiresPlanUpdate}, shouldSave=${shouldSave})`);
    }
     console.log(`%c[${action}] END for "${lec.title}"`, "color: magenta; font-weight: bold;");
}



// --- Planning Functions (No Change) ---
function getDaysRemaining(targetDate = examDate) { /* ... */ } // Same as before
function calculateAndDisplayDays() { /* ... */ } // Same as before
function updateDynamicPlan() {
    // ... (logic depends on computeGlobal) ...
    const g = computeGlobal(subName,subData); // Recalculates based on current state
    console.log(`%cupdateDynamicPlan: Using doneHours=${g.doneHours}`, "color: cyan;"); // DEBUG LOG
    // ... (rest of the logic) ...

    const subName=activeSubjectName;
    const subData=appData[subName];

    if(!subData){
        planStatus.textContent="-";
        planLecturesPerDay.textContent="-";
        if(planHoursPerDay)planHoursPerDay.textContent="-";
        if(remainingHoursEl)remainingHoursEl.textContent="-";
        if(planStatusInfo)planStatusInfo.title="";
        plannerStatusBox.classList.remove('status-danger','status-good','status-warn');
        return
    };

    // const g = computeGlobal(subName,subData); // Already calculated above
    const daysRem=getDaysRemaining();
    const totalDays=totalStudyDays;

    plannerStatusBox.classList.remove('status-danger','status-good','status-warn');

    if(daysRem===null||daysRem<=0){
        planLecturesPerDay.textContent="انتهى";
        if(planHoursPerDay)planHoursPerDay.textContent="انتهى";
        if(remainingHoursEl)remainingHoursEl.textContent="انتهى";
    }else if(g.remainingLectures===0){
        planLecturesPerDay.textContent="مكتمل 🎉";
        if(planHoursPerDay)planHoursPerDay.textContent="مكتمل 🎉";
        if(remainingHoursEl)remainingHoursEl.textContent="مكتمل 🎉";
    }else{
        const reqL=(g.remainingLectures/daysRem).toFixed(1);
        planLecturesPerDay.textContent=reqL;
        const totalHours = subData.totalHours || 0;
        const remainingEstimatedHours = Math.max(0, totalHours - g.doneHours);
        if(planHoursPerDay && totalHours > 0){
            const reqH=(remainingEstimatedHours/daysRem).toFixed(1);
            planHoursPerDay.textContent=isNaN(reqH)?'-':reqH;
            if (remainingHoursEl) {
                remainingHoursEl.textContent = remainingEstimatedHours.toFixed(1);
            }
        } else if(planHoursPerDay) {
            planHoursPerDay.textContent="-";
            if (remainingHoursEl) {
                remainingHoursEl.textContent = totalHours > 0 ? remainingEstimatedHours.toFixed(1) : "-";
            }
        }
    }

    let statusText="-";let statusClass='status-warn';

    if(totalDays<=0||daysRem===null||daysRem<0){
        // Error state handled below
    }else{
        const daysP=totalDays-daysRem;
        const expectPct=totalDays>0?Math.max(0,Math.min(100,(daysP/totalDays)*100)):0;
        const actualPct=g.blueprintPct;
        const diff=actualPct-expectPct;
        if(diff<-10){statusText="متأخر 😥";statusClass='status-danger';}
        else if(diff>10){statusText="متقدم 😎";statusClass='status-good';}
        else{statusText="على المسار 👍";statusClass='status-warn';}
    }
    planStatus.textContent=statusText;
    plannerStatusBox.className=`planner-box ${statusClass}`;

    if(planStatusInfo) {
        if(totalDays<=0||daysRem===null||daysRem<0) {
            planStatusInfo.title = "حدد تاريخ امتحان صحيح.";
        } else {
            planStatusInfo.title = "يقارن نسبة إنجاز البلوبرنت (الأهمية) بنسبة الوقت المنقضي. | متأخر 😥: إنجازك أقل بـ 10% من الوقت. | على المسار 👍: إنجازك في حدود 10% من الوقت. | متقدم 😎: إنجازك يتفوق بـ 10% على الوقت.";
        }
    }
}


// --- Modal Functions (No Change) ---
function openAddSubjectModal() { /* ... */ } // Same as before
function closeAddSubjectModal() { /* ... */ } // Same as before
function handleSaveNewSubject() { /* ... */ } // Same as before
async function handleSaveChapterHours(e) { /* ... */ } // Same as before
function openManageModal() { /* ... */ } // Same as before
function handleAddDoctor() { /* ... */ } // Same as before
function handleBulkAddLectures() { /* ... */ } // Same as before
function setupRemainingModal() { /* ... */ } // Same as before
function setupStarredModal() { /* ... */ } // Same as before

// --- Auth Functions (No Change) ---
async function signInWithGoogle() { /* ... */ } // Same as before
async function signOutUser() { /* ... */ } // Same as before

// --- Reset Function (No Change) ---
async function resetAllData() { /* ... */ } // Same as before

// --- Initialization Function (No Change) ---
function init(){ /* ... */ } // Same as before

// --- Clock Function (No Change) ---
function updateClock() { /* ... */ } // Same as before
function startClock() { /* ... */ } // Same as before

// --- Event Listeners Setup (No Change) ---
document.addEventListener('DOMContentLoaded', () => { /* ... */ }); // Same as before

</script>
</body>
</html>
