<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>متابعة كورسات (Firebase)</title>

<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore-compat.js"></script>

<style>
  /* --- Base Styles (Stable Version) --- */
  :root{
    --bg:#0f172a; --card:#111827; --muted:#1f2937;
    --accent:#3b82f6; --accent2:#22c55e; --warn:#f59e0b;
    --danger:#ef4444; --text:#e5e7eb; --sub:#cbd5e1;
    --warn-rgb: 245, 158, 11;
  }
  *{box-sizing:border-box}
  body{ margin:0; background:linear-gradient(180deg,#0b1226,#0f172a 50%,#0b1226); color:var(--text); font-family:"Tajawal",system-ui,Arial; font-size:18px; padding-top: 80px; }
  header{ position:fixed; top:0; right:0; left:0; z-index:50; background:rgba(15,23,42,.85); backdrop-filter:blur(8px); border-bottom:1px solid #1e293b; padding: 12px 0; height: 80px; }
  .header-container { max-width:1200px; margin:auto; padding:0 16px; display: flex; justify-content: space-between; align-items: center; gap: 16px; }
  h1{ margin:0; font-size: 22px; white-space: nowrap; }
  .container{max-width:1200px; margin:auto; padding:16px;}
  .subject-selector-container { display: flex; gap: 8px; align-items: center; flex-grow: 1; max-width: 500px; }
  .subject-selector-container select { flex-grow: 1; padding: 8px 12px; font-size: 14px; }
  #addSubjectBtn { padding: 8px 12px; min-width: 40px; font-size: 16px; flex-shrink: 0; }
  .kpis{display:flex; gap:10px; flex-wrap:wrap; margin-top:10px}
  .kpi{background:#0c1a2e; border:1px solid #173457; padding:8px 12px; border-radius:10px; font-size:16px; text-align: center;}
  .progress-stack { display: grid; gap: 8px; margin-top: 12px; }
  .progress-label { font-size: 14px; color: var(--sub); }
  .bar{height:12px; background:#0b1220; border-radius:999px; overflow:hidden; border:1px solid #1f2a40}
  .bar > span{ display:block; height:100%; background:linear-gradient(90deg,var(--accent),var(--accent2)); width:0%; transition: width 0.3s ease; }
  #blueprintBar > span { background:linear-gradient(90deg,var(--warn), #f00); }
  .toolbar{display:flex; gap:10px; flex-wrap:wrap; margin-top:12px}
  button, select { background:linear-gradient(180deg,#0f2a4a,#0a1f3b); color:#dbeafe; border:1px solid #1e3a5f; padding:10px 14px; border-radius:10px; cursor:pointer; font-weight:700; font-size:16px; font-family: inherit; }
  button.secondary{background:#121a2b; color:#cbd5e1; border:1px solid #263146}
  button.danger{background:#2a0f16; border-color:#5f1e29; color:#fecaca}
  button.warn{background:#3f2c0a; border-color:#854d0e; color:#fef3c7}
  .cards{ display:grid; grid-template-columns:1fr; gap:16px; margin:16px auto; }
  .card{ background:linear-gradient(180deg,#0f172a,#0c142a); border:1px solid #18243a; border-radius:18px; box-shadow:0 10px 30px rgba(0,0,0,.25), inset 0 1px 0 rgba(255,255,255,.02); padding: 0; }
  .card-header { padding: 16px; cursor: pointer; display: flex; justify-content: space-between; align-items: flex-start; gap: 16px; flex-wrap: nowrap;}
  .card-header:hover { background: rgba(255,255,255,0.03); }
  .card h2{margin:0; font-size:22px; flex-grow: 1;}
  .card-header .chapter-weight { font-size: 20px; font-weight: 700; color: var(--warn); flex-shrink: 0; }
  .card-content { padding: 0 16px 16px; display: grid; gap: 8px; display: none; }
  .row{ display:grid; grid-template-columns: auto auto 1fr auto auto auto; gap: 10px; align-items:center; padding:10px; border-radius:12px; border:1px solid #1a2742; background:#0b1527; font-size:16px; transition: all 0.2s ease; }
  .row.done{border-color:#1f3f2a; background:#0c1f14} .row.partial{border-color:#3a3214; background:#1c1609}
  .star-btn { background: none; border: none; color: var(--sub); font-size: 22px; cursor: pointer; padding: 0 5px; grid-column: 1; }
  .star-btn.active { color: var(--warn); }
  .row .lecture-weight { grid-column: 2; font-size: 14px; font-weight: 700; color: var(--warn); border-left: 2px solid var(--muted); padding-left: 10px; }
  .row .title{ font-weight:700; grid-column: 3; }
  .snooze-btn { grid-column: 4; background: var(--muted); color: var(--sub); border: 1px solid #2e3d55; padding: 6px 8px; border-radius: 8px; font-size: 16px; cursor: pointer; }
  .row label.chip { grid-column: span 1; }
  .row.snoozed { opacity: 0.4; background: #1a202c; } .row.snoozed .title { text-decoration: line-through; }
  .row.snoozed .snooze-btn { background: var(--warn); color: #000; border-color: var(--warn); }
  .chip{ display:inline-flex; align-items:center; gap:8px; background:#072437; color:#c3e4ff; border:1px solid #0b4a70; padding: 6px 10px; border-radius: 8px; font-size:14px; }
  .chip input{transform:scale(1.2); margin-right: 4px;}
  .modal-back{position:fixed; inset:0; background:rgba(2,6,23,.75); backdrop-filter:blur(6px); display:none; align-items:center; justify-content:center; z-index:100;}
  .modal{width:min(900px,92vw); max-height:80vh; overflow:auto; background:#0a1221; border:1px solid #1a2742; border-radius:16px; padding:16px;}
  .modal h3{margin:0 0 8px; font-size:22px} .divider{height:1px; background:#1d2a44; margin:12px 0}
  .footer{color:#9fb3ca; font-size:14px; margin:32px 0 16px; text-align: center; line-height: 1.6;}
  .footer a { color: var(--accent); text-decoration: none; } .footer a:hover { text-decoration: underline; }
  .form-group{margin-bottom:12px;} .form-group label{display:block; margin-bottom:4px; font-size:16px; color:var(--sub);}
  .form-group input, .form-group textarea, .form-group select{ width:100%; background:#0b1527; border:1px solid #1a2742; color:var(--text); padding:8px 12px; border-radius:8px; font-size:16px; }
  .form-group input[type="date"] { padding: 7px 12px; } .form-group textarea{ min-height: 150px; resize: vertical; }
  .planner-container { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px; justify-content: center; }
  .planner-box { background: #0c1a2e; border: 1px solid #173457; border-radius: 10px; padding: 12px 16px; flex-grow: 1; text-align: center; min-width: 150px; position: relative; }
  .planner-box.clickable { cursor: pointer; transition: background-color 0.2s ease; } .planner-box.clickable:hover { background: #173457; }
  .planner-box .label { font-size: 14px; color: var(--sub); margin-bottom: 4px; display: block; }
  .planner-box .value { font-size: 24px; font-weight: 700; color: var(--text); }
  .status-info-icon { font-size: 14px; color: var(--sub); margin-right: 5px; cursor: help; }
   /* Style for WhatIf info icon */
  #whatIfInfoIcon { font-size: 14px; color: var(--sub); margin-right: 5px; cursor: pointer; }

  .status-danger { border-color: var(--danger); background: #2a0f16; } .status-danger .value { color: var(--danger); }
  .status-good { border-color: var(--accent2); background: #0c1f14; } .status-good .value { color: var(--accent2); }
  .status-warn { border-color: var(--warn); background: #2a210f; } .status-warn .value { color: var(--warn); }
  .date-picker-hidden { position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer; border: none; }
  #mainAppContent { display: none; } #userSection { display: none; align-items: center; gap: 10px; }
  #userImg { width: 40px; height: 40px; border-radius: 50%; border: 2px solid var(--accent); }
  #userName { font-size: 14px; font-weight: bold; } #logoutBtn { font-size: 14px; padding: 6px 10px; }
  #loginBtn { display: block; }
  #aboutModal .modal-content { line-height: 1.7; }
  #aboutModal .modal-content h4 { color: var(--warn); margin-top: 1.5em; margin-bottom: 0.5em; }
  #aboutModal .modal-content ul { padding-right: 20px; }
  #aboutModal .modal-content code { background: var(--muted); padding: 2px 6px; border-radius: 4px; font-size: 0.9em; }
  .chapter-progress-container { width: 100px; height: 8px; background: #0b1220; border-radius: 999px; overflow: hidden; border: 1px solid #1f2a40; }
  .chapter-progress-bar { height: 100%; background: linear-gradient(90deg, var(--warn), #ffcc33); width: 0%; transition: width 0.3s ease; }
  .search-container { margin: 16px 0; }
  #searchInput { width: 100%; padding: 12px 16px; font-size: 16px; background: #0c1a2e; border: 1px solid #173457; border-radius: 10px; color: var(--text); }
  .row.highlight { background-color: rgba(245, 158, 11, 0.2); border-color: var(--warn); }
  #starredModal .card { margin-bottom: 12px; padding: 16px;}
  #starredModal .row { grid-template-columns: auto 1fr auto; gap: 15px;}
  #starredModal .completion-status { font-size: 14px; color: var(--sub); text-align: left;}
  #starredModal .completion-status.done { color: var(--accent2); }
  :root { --warn-rgb: 245, 158, 11; }
  #clockDateContainer {
    display: flex;
    gap: 10px;
    align-items: center;
    color: var(--sub);
    font-size: 14px;
    margin-right: auto;
    margin-left: 16px;
    white-space: nowrap;
  }
  #liveClock {
    font-weight: 700;
    color: var(--text);
    background: var(--muted);
    padding: 4px 10px;
    border-radius: 6px;
    font-size: 16px;
    letter-spacing: 1px;
  }
  #liveDate {
    font-size: 12px;
  }
  @media (max-width: 600px) {
    #clockDateContainer { display: none; }
  }
  .chapter-stats {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    font-size: 12px;
    color: var(--sub);
    margin-top: 10px;
    justify-content: flex-end;
  }
  .chapter-stats .stat-item {
    background: #0b1527;
    border: 1px solid #1a2742;
    padding: 2px 6px;
    border-radius: 6px;
  }
  .chapter-stats .stat-item span {
    font-weight: 700;
    color: var(--text);
  }
</style>
</head>
<body>

<header>
  <div class="header-container">
    <div style="display: flex; align-items: center; gap: 16px;">
        <h1 id="headerTitle">متابعة كورسات</h1>
    </div>
    <div id="clockDateContainer">
        <span id="liveDate"></span>
        <span id="liveClock"></span>
    </div>
    <div id="authSection" style="display: flex; align-items: center; gap: 10px; flex-shrink: 0;">
        <div id="userSection"> <img id="userImg" src="" alt="User"/> <span id="userName"></span> <button id="logoutBtn" class="secondary">خروج</button> </div>
        <button id="loginBtn" class="warn">تسجيل الدخول</button>
    </div>
  </div>
</header>

<main class="container" id="mainAppContent">
  <div class="subject-selector-container"> <select id="subjectSelector"></select> <button id="addSubjectBtn" class="warn">+</button> </div>

  <div class="planner-container">
    <div class="planner-box clickable status-warn" id="daysRemainingBox"> <span class="label">الأيام المتبقية</span> <b id="daysRemaining" class="value">-</b> <input type="date" id="datePickerInput" class="date-picker-hidden"> </div>
    <div class="planner-box clickable" id="totalHoursBox"> <span class="label">إجمالي الساعات</span> <b id="totalHours" class="value">-</b> </div>
    <div class="planner-box" id="remainingHoursBox"> <span class="label">الساعات المتبقية</span> <b id="remainingHours" class="value">-</b> </div>
    <div class="planner-box" id="plannerStatusBox"> <span class="label">حالتك <span id="planStatusInfo" class="status-info-icon" title="">❓</span></span> <b id="planStatus" class="value">-</b> </div>
    <div class="planner-box" id="plannerLecturesBox"> <span class="label">المطلوب يومياً (محاضرات)</span> <b id="planLecturesPerDay" class="value">-</b> </div>
    <div class="planner-box" id="plannerHoursBox"> <span class="label">المطلوب يومياً (ساعات)</span> <b id="planHoursPerDay" class="value">-</b> </div>
    <div class="planner-box clickable" id="whatIfBox">
        <span class="label" id="whatIfLabel">حاسبة ماذا لو <span id="whatIfInfoIcon">❓</span></span>
        <b id="whatIfValue" class="value" style="font-size: 18px;">-</b> </div>
  </div>
  <div class="progress-stack"> <div> <div style="display: flex; justify-content: space-between;"> <span class="progress-label">إنجاز المحاضرات</span> <b id="globalBarPct" style="font-size: 14px;">0%</b> </div> <div class="bar"><span id="globalBar"></span></div> </div> <div> <div style="display: flex; justify-content: space-between;"> <span class="progress-label">شريط نسبة mcq البلوبرنت</span> <b id="blueprintBarPct" style="font-size: 14px; color: var(--warn);">0%</b> </div> <div class="bar" id="blueprintBar"><span id="blueprintBarSpan"></span></div> </div> </div>
  <div class="search-container"> <input type="search" id="searchInput" placeholder="ابحث عن محاضرة..."> </div>
  <div class="toolbar"> <button class="warn" id="manageDataBtn">إدارة</button> <button class="secondary" id="sortBtn">فرز</button> <button id="showRemaining">المتبقي</button> <button class="warn" id="showStarredBtn">المفضلة ⭐</button> <button class="secondary" id="expandAll">فتح الكل</button> <button class="secondary" id="collapseAll">طيّ الكل</button> <button id="showAboutBtn">شرح</button> </div>
  <div class="kpis" id="globalKpis" style="margin-top:16px"></div> <div class="cards" id="cards"></div>
  <div class="footer"> برمجة وتصميم: علي احمد | للتواصل: <a href="https://t.me/draliturki" target="_blank" rel="noopener noreferrer">@draliturki</a> <br> بياناتك محفوظة سحابياً. </div>
</main>

<div class="modal-back" id="remainingModalBack"> <div class="modal"> <h3>المتبقي</h3> <div id="remainingContainer"></div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="closeRemainingModal">إغلاق</button> </div> </div> </div>
<div class="modal-back" id="addSubjectModal"> <div class="modal" style="width: min(500px, 90vw);"> <h3>إضافة مادة</h3> <div class="form-group"> <label for="newSubjectNameInput">اسم المادة:</label> <input type="text" id="newSubjectNameInput"/> </div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="cancelAddSubject">إلغاء</button> <button id="saveNewSubjectBtn" style="margin-right: 8px;">حفظ</button> </div> </div> </div>
<div class="modal-back" id="manageModalBack"> <div class="modal" id="manageModalContent"> </div> </div>
<div class="modal-back" id="aboutModal"> <div class="modal"> <h3>شرح الموقع</h3> <div class="modal-content"> <p>أهلاً بك...</p> </div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="closeAboutModal">إغلاق</button> </div> </div> </div>
<div class="modal-back" id="starredModal"> <div class="modal"> <h3>المفضلة ⭐</h3> <div id="starredContainer"></div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="closeStarredModal">إغلاق</button> </div> </div> </div>


<script>
// --- Firebase Config & Init (No Change) ---
const firebaseConfig = {
  apiKey: "AIzaSyBizJxYxXnO5u7EIvw6bjfJ3gRbzMJjCdw",
  authDomain: "course-progressing.firebaseapp.com",
  projectId: "course-progressing",
  storageBucket: "course-progressing.appspot.com",
  messagingSenderId: "349314472435",
  appId: "1:349314472435:web:0dd7b5297e02342b4cda86",
};
try { firebase.initializeApp(firebaseConfig); console.log("Firebase Initialized."); }
catch (e) { console.error("Firebase init failed:", e); }
const auth = firebase.auth(); const db = firebase.firestore(); const googleProvider = new firebase.auth.GoogleAuthProvider();

// --- App State ---
let currentUser = null; let userId = null; let userDocRef = null;
let appData = {}; let state = {}; let activeSubjectName = null;
let examDate = ""; let totalStudyDays = 0; let isSorted = false;
let whatIfMode = 'calculateDays'; // NEW: Track what-if mode

// --- DOM Elements ---
let mainAppContent, userSection, userImg, userName, loginBtn, logoutBtn, cardsEl, subjectSelector,
    daysRemainingEl, daysRemainingBox, datePickerInput, totalHoursEl, totalHoursBox,
    remainingHoursEl, remainingHoursBox,
    plannerStatusBox, planStatus, planLecturesPerDay, globalBar, globalBarPct,
    blueprintBarSpan, blueprintBarPct, headerTitle, addSubjectModal, addSubjectBtn,
    manageModalBack, remainingModalBack, planHoursPerDay, planStatusInfo, aboutModal,
    searchInput, starredModal,
    whatIfBox, whatIfLabel, whatIfValue, whatIfInfoIcon; // NEW: What-if elements

// --- Default Data ---
function getDefaultData() {
    return {
        "المادة الافتراضية": {
            totalHours: 100, chapters: {"Chapter 1": 40.5, "Chapter 2": 59.5}, chapterHours: {"Chapter 1": 10,"Chapter 2": 15},
            doctors: { "د. علي": [ { title: "Lec 1: Intro", video: "url", chapter: "Chapter 1", weight: 20.0 }, { title: "Lec 2: Advanced", video: "url", chapter: "Chapter 1", weight: 20.5 } ], "د. محمد": [ { title: "Lec 3: Basics", video: "url", chapter: "Chapter 2", weight: 59.5 } ] }
        }
    };
}

// --- Firestore Functions ---
async function loadDataFromFirestore() { if (!userDocRef) return; try { const dS = await userDocRef.get(); if (dS.exists) { const d = dS.data(); appData = d.appData || getDefaultData(); state = d.state || {}; const sK = Object.keys(appData); activeSubjectName = (d.activeSubjectName && appData[d.activeSubjectName]) ? d.activeSubjectName : (sK.length > 0 ? sK[0] : null); examDate = d.examDate || ""; totalStudyDays = d.totalStudyDays || 0; } else { appData = getDefaultData(); state = {}; activeSubjectName = Object.keys(appData)[0]; examDate = ""; totalStudyDays = 0; await saveAllDataToFirestore(); } } catch (e) { console.error("Err Ld:", e); appData = getDefaultData(); state = {}; activeSubjectName = Object.keys(appData)[0]; } }
async function saveAllDataToFirestore() { if (!userDocRef) return; try { await userDocRef.set({ appData, state, activeSubjectName, examDate, totalStudyDays }, { merge: true }); } catch (e) { console.error("Err sv all:", e); } }
async function saveAppData() { if (!userDocRef) return; try { await userDocRef.update({ appData }); } catch (e) { console.error("Err sv AppD:", e); } }
async function saveProgress() { if (!userDocRef) return; try { await userDocRef.update({ state }); } catch (e) { console.error("Err sv Prog:", e); } }
async function saveActiveSubject() { if (!userDocRef) return; try { await userDocRef.update({ activeSubjectName }); } catch (e) { console.error("Err sv ActSubj:", e); } }
async function saveExamDateAndDays(newD, newTD) { if (!userDocRef) return; examDate = newD; totalStudyDays = newTD; try { await userDocRef.update({ examDate, totalStudyDays }); } catch (e) { console.error("Err sv ExDate:", e); } }

// --- Calculation Functions ---
function isLectureComplete(rec){ return !!rec?.notes; }
function computeGlobal(subName, subData){
    let t = { l: 0, w: 0, dl: 0, dw: 0, sl: 0, sw: 0, v: 0, n: 0, dh: 0 };
    if(!subData || !subData.doctors) return {...t, al:0, aw:0, rl:0, rw:0, p:0, bp:0, vp:0, np:0, doneHours:0};
    Object.entries(subData.doctors).forEach(([dr, ls]) => {
        if (!Array.isArray(ls)) return;
        ls.forEach(l => {
            if (!l || typeof l !== 'object') return;
            const k = `${subName}||${l.chapter}||${l.title}`; const r = state[k] || { snoozed: !1 };
            t.l++; t.w += (l.weight || 0); if(r.video) t.v++; if(r.notes) t.n++;
            if(r.snoozed){ t.sl++; t.sw += (l.weight || 0); }
            else { if(isLectureComplete(r)){ t.dl++; t.dw += (l.weight || 0); if(r.video && r.videoDuration) { t.dh += r.videoDuration; } } }
        });
    });
    const al = t.l - t.sl; const aw = t.w - t.sw; const p = al > 0 ? (t.dl / al) * 100 : 0; const bp = aw > 0 ? (t.dw / aw) * 100 : 0;
    return { ...t, activeLectures: al, activeWeight: parseFloat(aw.toFixed(2)), remainingLectures: al - t.dl, remainingWeight: parseFloat((aw - t.dw).toFixed(2)), pct: Math.round(p), blueprintPct: Math.round(bp), videoPct: al > 0 ? Math.round(t.v / al * 100) : 0, notesPct: al > 0 ? Math.round(t.n / al * 100) : 0, snoozedLectures: t.sl, doneHours: t.dh };
}

// --- Rendering Functions ---
function renderGlobalHeader(subName, subData, computedGlobal){
    const g = computedGlobal || computeGlobal(subName, subData);
    if(subName){headerTitle.textContent=`متابعة: ${subName}`}else{headerTitle.textContent="متابعة كورسات"}
    globalBar.style.width=g.pct+'%';globalBarPct.textContent=g.pct+'%';
    blueprintBarSpan.style.width=g.blueprintPct+'%';blueprintBarPct.textContent=g.blueprintPct+'%';
    totalHoursEl.textContent=subData?.totalHours?`${subData.totalHours}`:"-";
    try{document.getElementById('globalKpis').innerHTML=`<span class=kpi>الكمية:${g.pct}%</span><span class="kpi status-warn" style="color:var(--warn)">البلوبرنت:${g.blueprintPct}%</span><span class=kpi>الباقي:${g.remainingLectures}/${g.activeLectures}</span><span class=kpi>المتجاهل:${g.snoozedLectures}</span>`}catch(e){/*ignore*/}
}
function render(subName, subData, searchTerm = "", openCardIds = []) {
    const globalStats = computeGlobal(subName, subData);
    renderGlobalHeader(subName, subData, globalStats);
    cardsEl.innerHTML = "";
    if (!subData || !subData.doctors || Object.keys(subData.doctors).length === 0) { cardsEl.innerHTML = `<p style="text-align:center;">لا توجد بيانات لهذه المادة.</p>`; return; }
    const chapters = {}; const chW = subData.chapters || {};
    Object.entries(subData.doctors).forEach(([dr, ls]) => {
        if (!Array.isArray(ls)) return;
        ls.forEach(l => {
            if (!l || typeof l !== 'object') return; const cn = l.chapter || "غير مصنف";
            if (!chapters[cn]) { chapters[cn] = { lectures: [], totalWeight: chW[cn] || 0, lectureCount: 0, lecturesRemaining: 0, hoursDone: 0 }; }
            chapters[cn].lectures.push({ ...l, doctor: dr }); const k = `${subName}||${cn}||${l.title}`; const rec = state[k] || { snoozed: !1 };
            if (!rec.snoozed) { chapters[cn].lectureCount++; if (!isLectureComplete(rec)) { chapters[cn].lecturesRemaining++; } if (isLectureComplete(rec) && rec.video && rec.videoDuration) { chapters[cn].hoursDone += rec.videoDuration; } }
        });
    });
    let chA = Object.entries(chapters).map(([n, d]) => ({ name: n, totalWeight: parseFloat(d.totalWeight.toFixed(2)), lectures: d.lectures, stats: { count: d.lectureCount, remaining: d.lecturesRemaining, hoursDone: d.hoursDone } }));
    if (isSorted) { chA.sort((a, b) => b.totalWeight - a.totalWeight); }
    let firstMatchElement = null;
    chA.forEach((ch, idx) => {
        let chapterCompletedWeight = 0; let chapterActiveWeight = 0; let hasVisibleLectures = false;
        const lecturesHTML = ch.lectures.map(l => {
            const k = `${subName}||${l.chapter}||${l.title}`; const rec = state[k] || { snoozed: !1, starred: !1 }; const isMatch = searchTerm && l.title?.toLowerCase().includes(searchTerm.toLowerCase()); if (searchTerm && !isMatch) return ''; hasVisibleLectures = true;
            let rcs = "row"; if (isLectureComplete(rec)) rcs += " done"; else if (rec.video || rec.notes) rcs += " partial"; if (rec.snoozed) rcs += " snoozed"; if (isMatch) rcs += " highlight"; if (isMatch && !firstMatchElement) { firstMatchElement = { key: k }; }
            if (!rec.snoozed) { chapterActiveWeight += (l.weight || 0); if (isLectureComplete(rec)) { chapterCompletedWeight += (l.weight || 0); } }
            const starIcon = rec.starred ? '⭐' : '☆';
            return `<div class="${rcs}" data-key="${k}"><button class="star-btn ${rec.starred?'active':''}" data-action="star" title="تمييز">${starIcon}</button><span class=lecture-weight>${l.weight || 0}%</span><div class=title>${l.title}</div><button class=snooze-btn data-action=snooze title=تجاهل>🚫</button><label class=chip><input type=checkbox data-action=video ${rec.video?'checked':''}> فيديو</label><label class=chip><input type=checkbox data-action=notes ${rec.notes?'checked':''}> ملزمة</label></div>`;
        }).join('');
        if (hasVisibleLectures) {
            const chapterBlueprintPct = chapterActiveWeight > 0 ? Math.round((chapterCompletedWeight / chapterActiveWeight) * 100) : 0; const chapterHoursTotal = subData.chapterHours?.[ch.name] || 0; const chapterHoursRemaining = Math.max(0, chapterHoursTotal - ch.stats.hoursDone);
            const card = document.createElement('section'); card.className = "card"; const cId = `c-${idx}`;
            card.innerHTML = `<div class=card-header data-collapse="${cId}"><h2>${ch.name}</h2><div style="text-align: left; flex-shrink: 0; max-width: 250px;"><div style="display: flex; gap: 16px; align-items: center; justify-content: flex-end;"><span class=chapter-weight>${ch.totalWeight}%</span><div class="chapter-progress-container"><div class="chapter-progress-bar" style="width: ${chapterBlueprintPct}%;"></div></div></div><div class="chapter-stats"><div class="stat-item">المحاضرات: <span>${ch.stats.count}</span></div><div class="stat-item">المتبقي: <span>${ch.stats.remaining}</span></div><div class="stat-item">الساعات: <span>${chapterHoursTotal.toFixed(1)}h</span></div><div class="stat-item">متبقي: <span>${chapterHoursRemaining.toFixed(1)}h</span></div></div></div></div><div id="${cId}" class=card-content>${lecturesHTML}</div>`;
            cardsEl.appendChild(card);
            const listEl = card.querySelector(`#${cId}`);
            if(searchTerm || openCardIds.includes(cId)) { listEl.style.display = 'grid'; } else { listEl.style.display = 'none'; } // Restore open state
            card.querySelector('[data-collapse]').addEventListener('click', (e) => { if (e.target.closest('button,input,label')) return; listEl.style.display = (listEl.style.display === 'none' || listEl.style.display === '') ? 'grid' : 'none' });
            listEl.querySelectorAll('.row button, .row input').forEach(el => { el.addEventListener('click', (e) => { e.stopPropagation(); const rowEl = e.target.closest('.row'); const title = rowEl.querySelector('.title').textContent; const lectureData = ch.lectures.find(l => l.title === title); if (lectureData) { updateEntry(subName, lectureData, rowEl, el.dataset.action); } else { console.error("Could not find lecture data for event target:", title); } }) });
        }
    });
    if (firstMatchElement) { setTimeout(() => { const elementToScroll = cardsEl.querySelector(`.row[data-key="${firstMatchElement.key}"]`); if (elementToScroll) { elementToScroll.scrollIntoView({ behavior: 'smooth', block: 'center' }); } }, 100); } else if (searchTerm) { cardsEl.innerHTML = `<p style="text-align:center;">لا توجد نتائج بحث.</p>`; }
}


/*
=============================================================================
=== ✅ MODIFIED LOGIC: updateEntry Function ===
1.  Video Action: NOW PROMPTS FOR HOURS *EVERY TIME* the box is checked.
2.  Uses requiresRecalculation logic from previous stable version.
=============================================================================
*/
async function updateEntry(subName, lec, rowEl, action){
    const k = `${subName}||${lec.chapter}||${lec.title}`;
    const rec = state[k] || {snoozed:!1, starred: !1, videoDuration: null};
    let shouldSave = true;
    let requiresRecalculation = false; // Flag to determine if render/updatePlan is needed

    // --- 1. Perform Action & Update State Object ---
    if(action === 'video'){
        const isChecking = rowEl.querySelector('[data-action=video]').checked;
        const wasVideoChecked = rec.video; // Capture old state

        // --- START OF MODIFICATION ---
        // Prompt logic (NOW TRIGGERS EVERY TIME an item is CHECKED)
        if (isChecking) {
            // Suggest current value if it exists
            const currentDuration = (rec.videoDuration !== null && rec.videoDuration !== undefined) ? rec.videoDuration : "";
            const durationInput = prompt(`كم ساعة استغرق فيديو "${lec.title}"؟ (أدخل رقم)`, currentDuration);

            if (durationInput !== null) { // Not cancelled
                const duration = parseFloat(durationInput);
                if (!isNaN(duration) && duration >= 0) { // Allow 0 hours
                    rec.videoDuration = duration;
                    rec.video = true; // Set video to true
                } else { // Invalid input
                    alert("الرجاء إدخال رقم صحيح للساعات (مثل 1.5 أو 0).");
                    rowEl.querySelector('[data-action=video]').checked = rec.video; // Revert UI
                    shouldSave = false;
                }
            } else { // User cancelled prompt
                rowEl.querySelector('[data-action=video]').checked = rec.video; // Revert UI
                shouldSave = false;
            }
        } else {
             // User is UNCHECKING the video box
             rec.video = false;
        }
        // --- END OF MODIFICATION ---


        // Determine Recalculation Need AFTER state update attempt
        // Recalculation needed IF save is happening AND notes are checked AND video state actually changed
        if (shouldSave && rec.notes && (rec.video !== wasVideoChecked)) {
            requiresRecalculation = true;
        }

    }
    else if(action === 'notes'){
        rec.notes = rowEl.querySelector('[data-action=notes]').checked;
        requiresRecalculation = true; // Always true for notes/completion change
    }
    else if(action === 'snooze'){
        rec.snoozed = !rec.snoozed;
        requiresRecalculation = true; // Always true for snooze change
    }
    else if(action === 'star'){
        rec.starred = !rec.starred;
        const starBtn = rowEl.querySelector('.star-btn');
        if(starBtn) {
            starBtn.classList.toggle('active', rec.starred);
            starBtn.textContent = rec.starred ? '⭐' : '☆';
        }
        // No recalculation needed, but save is needed.
    }

    // --- 2. Save Block ---
    if (shouldSave) {
        state[k] = rec;
        try {
            await saveProgress();

            // --- 3. Recalculate and Re-render (Only if needed) ---
            if (requiresRecalculation) {
                const openCardIds = [];
                if (cardsEl) { cardsEl.querySelectorAll('.card-content').forEach(contentEl => { if (contentEl.style.display === 'grid') { openCardIds.push(contentEl.id); } }); }
                render(subName, appData[subName], searchInput ? searchInput.value : "", openCardIds);
                updateDynamicPlan();
            } else if (action !== 'star') {
                 rowEl.classList.remove('done','partial','snoozed'); if(isLectureComplete(rec)) rowEl.classList.add('done'); else if(rec.video || rec.notes) rowEl.classList.add('partial'); if(rec.snoozed) rowEl.classList.add('snoozed');
            }

        } catch (e) {
            console.error("Save failed:", e);
            if (action === 'video') rowEl.querySelector('[data-action=video]').checked = !rec.video;
            if (action === 'notes') rowEl.querySelector('[data-action=notes]').checked = !rec.notes;
            alert("فشل حفظ التغيير. الرجاء المحاولة مرة أخرى.");
        }
    } else {
        if (action === 'video') rowEl.querySelector('[data-action=video]').checked = rec.video; // Ensure UI matches non-saved state
    }
}


// --- Planning Functions ---
function getDaysRemaining(targetDate = examDate) { if (!targetDate) return null; const today=new Date();today.setHours(0,0,0,0);const examD=new Date(targetDate);const diffT=examD.getTime()-today.getTime();const diffD=Math.ceil(diffT/(1e3*60*60*24));return diffD; }
function calculateAndDisplayDays() { const diffD=getDaysRemaining();daysRemainingBox.classList.remove('status-danger','status-good','status-warn');datePickerInput.value=examDate;if(diffD===null){daysRemainingEl.textContent="-"}else if(diffD<=0){daysRemainingEl.textContent="انتهى!";daysRemainingBox.classList.add('status-danger')}else if(diffD<=7){daysRemainingEl.textContent=diffD;daysRemainingBox.classList.add('status-danger')}else if(diffD<=30){daysRemainingEl.textContent=diffD;daysRemainingBox.classList.add('status-warn')}else{daysRemainingEl.textContent=diffD;daysRemainingBox.classList.add('status-good')} }
function updateDynamicPlan() {
    const subName=activeSubjectName; const subData=appData[subName];
    if(!subData){ planStatus.textContent="-"; planLecturesPerDay.textContent="-"; if(planHoursPerDay)planHoursPerDay.textContent="-"; if(remainingHoursEl)remainingHoursEl.textContent="-"; if(planStatusInfo)planStatusInfo.title=""; plannerStatusBox.classList.remove('status-danger','status-good','status-warn'); return };
    const g = computeGlobal(subName,subData); const daysRem=getDaysRemaining(); const totalDays=totalStudyDays;
    plannerStatusBox.classList.remove('status-danger','status-good','status-warn');
    if(daysRem===null||daysRem<=0){ planLecturesPerDay.textContent="انتهى"; if(planHoursPerDay)planHoursPerDay.textContent="انتهى"; if(remainingHoursEl)remainingHoursEl.textContent="انتهى"; }
    else if(g.remainingLectures===0){ planLecturesPerDay.textContent="مكتمل 🎉"; if(planHoursPerDay)planHoursPerDay.textContent="مكتمل 🎉"; if(remainingHoursEl)remainingHoursEl.textContent="مكتمل 🎉"; }
    else{
        const reqL=(g.remainingLectures/daysRem).toFixed(1); planLecturesPerDay.textContent=reqL;
        const totalHours = subData.totalHours || 0; const remainingEstimatedHours = Math.max(0, totalHours - g.doneHours);
        if(planHoursPerDay && totalHours > 0){ const reqH=(remainingEstimatedHours/daysRem).toFixed(1); planHoursPerDay.textContent=isNaN(reqH)?'-':reqH; if (remainingHoursEl) { remainingHoursEl.textContent = remainingEstimatedHours.toFixed(1); } }
        else if(planHoursPerDay) { planHoursPerDay.textContent="-"; if (remainingHoursEl) { remainingHoursEl.textContent = totalHours > 0 ? remainingEstimatedHours.toFixed(1) : "-"; } }
    }
    let statusText="-";let statusClass='status-warn';
    if(totalDays<=0||daysRem===null||daysRem<0){ /* Error state handled below */ }
    else{ const daysP=totalDays-daysRem; const expectPct=totalDays>0?Math.max(0,Math.min(100,(daysP/totalDays)*100)):0; const actualPct=g.blueprintPct; const diff=actualPct-expectPct; if(diff<-10){statusText="متأخر 😥";statusClass='status-danger';} else if(diff>10){statusText="متقدم 😎";statusClass='status-good';} else{statusText="على المسار 👍";statusClass='status-warn';} }
    planStatus.textContent=statusText; plannerStatusBox.className=`planner-box ${statusClass}`;
    if(planStatusInfo) { if(totalDays<=0||daysRem===null||daysRem<0) { planStatusInfo.title = "حدد تاريخ امتحان صحيح."; } else { planStatusInfo.title = "يقارن نسبة إنجاز البلوبرنت (الأهمية) بنسبة الوقت المنقضي. | متأخر 😥: إنجازك أقل بـ 10% من الوقت. | على المسار 👍: إنجازك في حدود 10% من الوقت. | متقدم 😎: إنجازك يتفوق بـ 10% على الوقت."; } }
}

// --- NEW What-If Function ---
function handleWhatIfClick() {
    if (!currentUser || !remainingHoursEl) return;
    const remainingHoursText = remainingHoursEl.textContent; let remainingHours = 0;
    if (remainingHoursText && !isNaN(parseFloat(remainingHoursText))) { remainingHours = parseFloat(remainingHoursText); }
    if (remainingHours <= 0) { whatIfValue.textContent = "مكتمل!"; whatIfLabel.innerHTML = `حاسبة ماذا لو <span id="whatIfInfoIcon">❓</span>`; whatIfMode = 'calculateDays'; attachWhatIfInfoListener(); return; }
    if (whatIfMode === 'calculateDays') {
        const hoursInput = prompt("أدخل الساعات اليومية التي تخطط لدراستها:", "2");
        if (hoursInput !== null) { const hoursPerDay = parseFloat(hoursInput); if (!isNaN(hoursPerDay) && hoursPerDay > 0) { const daysNeeded = remainingHours / hoursPerDay; whatIfValue.textContent = `${daysNeeded.toFixed(1)} يوم (بـ ${hoursPerDay} س/يوم)`; whatIfLabel.innerHTML = `أيام مطلوبة <span id="whatIfInfoIcon">❓</span>`; whatIfMode = 'calculateHours'; } else { alert("الرجاء إدخال رقم صحيح أكبر من صفر للساعات."); } }
    } else { // calculateHours mode
        const daysInput = prompt("أدخل عدد الأيام الذي تريد إنهاء المادة خلاله:", "30");
        if (daysInput !== null) { const targetDays = parseInt(daysInput); if (!isNaN(targetDays) && targetDays > 0) { const hoursPerDayNeeded = remainingHours / targetDays; whatIfValue.textContent = `${hoursPerDayNeeded.toFixed(1)} س/يوم (لـ ${targetDays} يوم)`; whatIfLabel.innerHTML = `ساعات مطلوبة <span id="whatIfInfoIcon">❓</span>`; whatIfMode = 'calculateDays'; } else { alert("الرجاء إدخال رقم صحيح أكبر من صفر للأيام."); } }
    }
    attachWhatIfInfoListener(); // Re-attach listener after innerHTML change
}

// --- NEW Function to show What-If Info ---
function showWhatIfInfo(event) {
    event.stopPropagation(); // Prevent triggering handleWhatIfClick
    alert(
        "شرح حاسبة ماذا لو:\n\n" +
        "هذا الصندوق يساعدك على التخطيط بناءً على الساعات المتبقية لديك حالياً.\n\n" +
        "⬅️ الحالة الأولى (الأيام المطلوبة):\n" +
        "   - اضغط على الصندوق.\n" +
        "   - أدخل عدد الساعات التي تنوي دراستها يومياً (مثلاً: 3).\n" +
        "   - سيعرض الصندوق عدد الأيام التقريبي الذي تحتاجه لإنهاء الساعات المتبقية بهذا المعدل.\n\n" +
        "➡️ الحالة الثانية (الساعات المطلوبة):\n" +
        "   - اضغط على الصندوق مرة أخرى.\n" +
        "   - أدخل عدد الأيام الذي تستهدف إنهاء المادة خلاله (مثلاً: 25).\n" +
        "   - سيعرض الصندوق عدد الساعات اليومية التقريبي الذي تحتاجه لتحقيق هذا الهدف."
    );
}

// --- NEW Function to attach What-If Info Listener ---
function attachWhatIfInfoListener() {
    // We need to re-find the icon by ID each time because innerHTML might replace it
    const icon = document.getElementById('whatIfInfoIcon');
    if (icon) {
        // Remove potentially existing listener before adding a new one
        icon.removeEventListener('click', showWhatIfInfo);
        icon.addEventListener('click', showWhatIfInfo);
    }
}

// --- Modal Functions (No Change) ---
function openAddSubjectModal() { if (!currentUser) return; document.getElementById('newSubjectNameInput').value = ''; addSubjectModal.style.display = 'flex'; }
function closeAddSubjectModal() { addSubjectModal.style.display = 'none'; }
function handleSaveNewSubject() { if (!currentUser) return; const nameIn=document.getElementById('newSubjectNameInput');const name=nameIn.value.trim();if(name&&!appData[name]){appData[name]={totalHours:0,chapters:{},doctors:{}, chapterHours:{}}; saveAppData();activeSubjectName=name;saveActiveSubject();init();closeAddSubjectModal()}else if(!name){alert('أدخل اسم المادة.')}else{alert('المادة موجودة.')} }
async function handleSaveChapterHours(e) { if (!currentUser || !activeSubjectName) return; const input = e.target; const chName = input.dataset.chapterName; const hours = parseFloat(input.value); if (chName && !isNaN(hours) && hours >= 0) { if (!appData[activeSubjectName].chapterHours) { appData[activeSubjectName].chapterHours = {}; } appData[activeSubjectName].chapterHours[chName] = hours; await saveAppData(); render(activeSubjectName, appData[activeSubjectName], searchInput ? searchInput.value : ""); } }
function openManageModal() { /* ... */ } // Same as before
function handleAddDoctor() { if(!currentUser)return; const subName=activeSubjectName;const inp=document.getElementById('newDoctorName');const name=inp.value.trim();if(name&&!appData[subName].doctors[name]){appData[subName].doctors[name]=[];saveAppData();init();openManageModal()}else{alert('الاسم موجود أو فارغ.')} }
function handleBulkAddLectures() { if(!currentUser)return; const subName=activeSubjectName;const dr=document.getElementById('doctorSelect').value;const txt=document.getElementById('bulkLectures');const tx=txt.value.trim();if(!dr||!tx){alert('اختر دكتور والصق المحاضرات.');return} const newLs=tx.split('\n').map(l=>l.trim()).filter(l=>l).map(t=>({title:t,video:"",chapter:"غير مصنف",weight:0}));if(newLs.length>0){const exLs=appData[subName].doctors[dr] || []; appData[subName].doctors[dr]=exLs.concat(newLs);saveAppData();txt.value='';alert(`تمت إضافة ${newLs.length}.`);init();openManageModal()} }
function setupRemainingModal() { /* ... */ } // Same as before
function setupStarredModal() { /* ... */ } // Same as before

// --- Auth Functions (No Change) ---
async function signInWithGoogle() { console.log("Attempting Google Sign-In..."); try { await auth.signInWithPopup(googleProvider); console.log("Sign-in popup initiated."); } catch (e) { console.error("Sign-in error:", e); if (e.code !== 'auth/popup-closed-by-user') {alert("خطأ الدخول: " + e.message);} else {console.log("Popup closed.");} } }
async function signOutUser() { console.log("Signing out..."); try { await auth.signOut(); } catch (e) { console.error("Sign-out error:", e); alert("خطأ الخروج: " + e.message); } }

// --- Reset Function (No Change) ---
async function resetAllData() { /* ... */ } // Same as before

// --- Initialization Function (No Change) ---
function init(openCardIds = []){
    console.log("%cinit() called.", "color: green; font-weight: bold;");
    if (!currentUser) { console.warn("Cannot init, user not logged in."); return; }
    const subjectKeys = Object.keys(appData);
    if (subjectKeys.length === 0) { render(null, null, "", openCardIds); subjectSelector.innerHTML = '<option>لا توجد مواد</option>'; }
    else {
        if (!activeSubjectName || !appData[activeSubjectName]) { activeSubjectName = subjectKeys[0]; }
        subjectSelector.innerHTML = ''; subjectKeys.forEach(subName => { const opt=document.createElement('option');opt.value=subName;opt.textContent=subName;if(subName===activeSubjectName)opt.selected=true; subjectSelector.appendChild(opt); });
        render(activeSubjectName, appData[activeSubjectName], searchInput ? searchInput.value : "", openCardIds);
    }
    calculateAndDisplayDays(); updateDynamicPlan();
    console.log("%cinit() finished.", "color: green; font-weight: bold;");
}

// --- Clock Function (No Change) ---
function updateClock() { /* ... */ } // Same as before
function startClock() { /* ... */ } // Same as before

// --- Event Listeners Setup (Prioritize Auth Buttons) ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM loaded. Fetching essential elements first.");
    loginBtn = document.getElementById('loginBtn'); logoutBtn = document.getElementById('logoutBtn');
    if (loginBtn) { loginBtn.addEventListener('click', signInWithGoogle); console.log("%cLogin listener attached.", "color: green;"); } else { console.error("CRITICAL ERROR: Login button ('loginBtn') NOT FOUND!"); }
    if (logoutBtn) { logoutBtn.addEventListener('click', signOutUser); console.log("%cLogout listener attached.", "color: green;"); } else { console.warn("Logout button ('logoutBtn') not initially found.");}

    // --- Fetch other elements ---
    mainAppContent = document.getElementById('mainAppContent'); userSection = document.getElementById('userSection'); userImg = document.getElementById('userImg'); userName = document.getElementById('userName'); cardsEl = document.getElementById('cards'); subjectSelector = document.getElementById('subjectSelector');
    daysRemainingEl = document.getElementById('daysRemaining'); daysRemainingBox = document.getElementById('daysRemainingBox'); datePickerInput = document.getElementById('datePickerInput');
    totalHoursEl = document.getElementById('totalHours'); totalHoursBox = document.getElementById('totalHoursBox');
    remainingHoursEl = document.getElementById('remainingHours'); remainingHoursBox = document.getElementById('remainingHoursBox');
    plannerStatusBox = document.getElementById('plannerStatusBox');
    planStatus = document.getElementById('planStatus'); planLecturesPerDay = document.getElementById('planLecturesPerDay'); globalBar = document.getElementById('globalBar');
    globalBarPct = document.getElementById('globalBarPct'); blueprintBarSpan = document.getElementById('blueprintBarSpan'); blueprintBarPct = document.getElementById('blueprintBarPct');
    headerTitle = document.getElementById('headerTitle'); addSubjectModal = document.getElementById('addSubjectModal'); addSubjectBtn = document.getElementById('addSubjectBtn');
    manageModalBack = document.getElementById('manageModalBack'); remainingModalBack = document.getElementById('remainingModalBack');
    planHoursPerDay = document.getElementById('planHoursPerDay'); planStatusInfo = document.getElementById('planStatusInfo'); aboutModal = document.getElementById('aboutModal');
    searchInput = document.getElementById('searchInput'); starredModal = document.getElementById('starredModal');
    whatIfBox = document.getElementById('whatIfBox'); whatIfLabel = document.getElementById('whatIfLabel'); whatIfValue = document.getElementById('whatIfValue'); whatIfInfoIcon = document.getElementById('whatIfInfoIcon'); // Fetch info icon

    console.log("Other elements fetched. Attaching remaining listeners.");
    startClock();

    // --- Attach other base listeners ---
    if (addSubjectBtn) addSubjectBtn.addEventListener('click', openAddSubjectModal);
    const saveSubjBtn = document.getElementById('saveNewSubjectBtn'); if (saveSubjBtn) saveSubjBtn.addEventListener('click', handleSaveNewSubject);
    const cancelSubjBtn = document.getElementById('cancelAddSubject'); if (cancelSubjBtn) cancelSubjBtn.addEventListener('click', closeAddSubjectModal);
    const manageBtn = document.getElementById('manageDataBtn'); if (manageBtn) manageBtn.addEventListener('click', openManageModal);
    const showRemBtn = document.getElementById('showRemaining'); if (showRemBtn) showRemBtn.addEventListener('click', setupRemainingModal);
    const closeRemBtn = document.getElementById('closeRemainingModal'); if (closeRemBtn) { closeRemBtn.addEventListener('click', () => remainingModalBack.style.display = "none"); }
    const expAllBtn = document.getElementById('expandAll'); if (expAllBtn) expAllBtn.addEventListener('click', ()=>{ document.querySelectorAll('.card-content').forEach(el=> el.style.display = 'grid'); });
    const colAllBtn = document.getElementById('collapseAll'); if (colAllBtn) colAllBtn.addEventListener('click', ()=>{ document.querySelectorAll('.card-content').forEach(el=> el.style.display = 'none'); });
    const sortBtn = document.getElementById('sortBtn'); if (sortBtn) sortBtn.addEventListener('click', ()=>{ isSorted = !isSorted; const btn = sortBtn; if (isSorted) { btn.textContent = "إلغاء الفرز"; btn.classList.add('warn'); } else { btn.textContent = "فرز حسب الأهمية"; btn.classList.remove('warn'); } if(currentUser) init(); });
    if (daysRemainingBox) daysRemainingBox.addEventListener('click', () => { if(!currentUser) return; try{ datePickerInput.showPicker(); } catch(e){console.warn("Picker err",e)} });
    if (datePickerInput) datePickerInput.addEventListener('change', (e) => { if(!currentUser) return; const newD = e.target.value; if(newD){ const tDays=getDaysRemaining(newD); saveExamDateAndDays(newD, tDays); calculateAndDisplayDays(); updateDynamicPlan(); } });
    if (totalHoursBox) totalHoursBox.addEventListener('click', () => { /* ... Total Hours Logic ... */ });
    if (subjectSelector) subjectSelector.addEventListener('change', (e) => { if(!currentUser) return; const newS=e.target.value; activeSubjectName=newS; saveActiveSubject(); init(); }); // Call init() on subject change
    const showAboutBtn = document.getElementById('showAboutBtn'); const closeAboutBtn = document.getElementById('closeAboutModal'); if (showAboutBtn && aboutModal && closeAboutBtn) { showAboutBtn.addEventListener('click', () => aboutModal.style.display = 'flex'); closeAboutBtn.addEventListener('click', () => aboutModal.style.display = 'none'); aboutModal.addEventListener('click', (e) => { if(e.target === aboutModal) aboutModal.style.display='none'; }); }
    if (searchInput) { searchInput.addEventListener('input', (e) => { if (currentUser && activeSubjectName) { render(activeSubjectName, appData[activeSubjectName], e.target.value); } }); }
    const showStarredBtn = document.getElementById('showStarredBtn'); const closeStarredBtn = document.getElementById('closeStarredModal'); if (showStarredBtn && starredModal && closeStarredBtn) { showStarredBtn.addEventListener('click', setupStarredModal); closeStarredBtn.addEventListener('click', () => starredModal.style.display = 'none'); starredModal.addEventListener('click', (e) => { if(e.target === starredModal) starredModal.style.display='none'; }); }

    // --- Add listeners for What-If ---
    if (whatIfBox) { whatIfBox.addEventListener('click', handleWhatIfClick); }
    attachWhatIfInfoListener(); // Attach listener initially


    // --- Auth State Observer (No Change) ---
    auth.onAuthStateChanged(async (user) => {
      console.log("Auth state changed:", user ? user.uid : 'null');
      if (user) {
        currentUser = user; userId = user.uid; userDocRef = db.collection('users').doc(userId);
        if (userImg && userName && userSection && loginBtn && mainAppContent) {
            userImg.src = user.photoURL || ''; userName.textContent = user.displayName || 'User';
            userSection.style.display = 'flex'; loginBtn.style.display = 'none';
            if (logoutBtn && !logoutBtn.onclick) { logoutBtn.addEventListener('click', signOutUser); } // Ensure logout listener
            await loadDataFromFirestore(); init(); mainAppContent.style.display = 'block';
        } else { console.error("Auth UI elements not found!"); }
      } else {
        currentUser = null; userId = null; userDocRef = null;
        if (userSection && loginBtn && mainAppContent && subjectSelector && cardsEl) {
            userSection.style.display = 'none'; loginBtn.style.display = 'block'; mainAppContent.style.display = 'none';
            appData = {}; state = {}; activeSubjectName = null; examDate = ""; totalStudyDays = 0; isSorted = false;
            if(subjectSelector) subjectSelector.innerHTML = ''; if(cardsEl) cardsEl.innerHTML = '';
            try { renderGlobalHeader(null, null); updateDynamicPlan(); calculateAndDisplayDays(); } catch(e) {/*ignore*/}
            const sortBtn = document.getElementById('sortBtn'); if (sortBtn) { sortBtn.textContent = "فرز حسب الأهمية"; sortBtn.classList.remove('warn'); }
        } else { console.error("Auth or main UI elements not found!"); }
      }
    });

    console.log("All listeners potentially attached.");
}); // End of DOMContentLoaded
</script>
</body>
</html>
