<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>متابعة كورسات (Firebase)</title>

<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore-compat.js"></script>

<style>
  /* --- Base Styles (No Change) --- */
  :root{
    --bg:#0f172a; --card:#111827; --muted:#1f2937;
    --accent:#3b82f6; --accent2:#22c55e; --warn:#f59e0b;
    --danger:#ef4444; --text:#e5e7eb; --sub:#cbd5e1;
    --warn-rgb: 245, 158, 11;
  }
  *{box-sizing:border-box}
  body{ margin:0; background:linear-gradient(180deg,#0b1226,#0f172a 50%,#0b1226); color:var(--text); font-family:"Tajawal",system-ui,Arial; font-size:18px; padding-top: 80px; }
  header{ position:fixed; top:0; right:0; left:0; z-index:50; background:rgba(15,23,42,.85); backdrop-filter:blur(8px); border-bottom:1px solid #1e293b; padding: 12px 0; height: 80px; }
  .header-container { max-width:1200px; margin:auto; padding:0 16px; display: flex; justify-content: space-between; align-items: center; gap: 16px; }
  h1{ margin:0; font-size: 22px; white-space: nowrap; }
  .container{max-width:1200px; margin:auto; padding:16px;}
  .subject-selector-container { display: flex; gap: 8px; align-items: center; flex-grow: 1; max-width: 500px; }
  .subject-selector-container select { flex-grow: 1; padding: 8px 12px; font-size: 14px; }
  #addSubjectBtn { padding: 8px 12px; min-width: 40px; font-size: 16px; flex-shrink: 0; }
  .kpis{display:flex; gap:10px; flex-wrap:wrap; margin-top:10px}
  .kpi{background:#0c1a2e; border:1px solid #173457; padding:8px 12px; border-radius:10px; font-size:16px; text-align: center;}
  .progress-stack { display: grid; gap: 8px; margin-top: 12px; }
  .progress-label { font-size: 14px; color: var(--sub); }
  .bar{height:12px; background:#0b1220; border-radius:999px; overflow:hidden; border:1px solid #1f2a40}
  .bar > span{ display:block; height:100%; background:linear-gradient(90deg,var(--accent),var(--accent2)); width:0%; transition: width 0.3s ease; }
  #blueprintBar > span { background:linear-gradient(90deg,var(--warn), #f00); }
  .toolbar{display:flex; gap:10px; flex-wrap:wrap; margin-top:12px}
  button, select { background:linear-gradient(180deg,#0f2a4a,#0a1f3b); color:#dbeafe; border:1px solid #1e3a5f; padding:10px 14px; border-radius:10px; cursor:pointer; font-weight:700; font-size:16px; font-family: inherit; }
  button.secondary{background:#121a2b; color:#cbd5e1; border:1px solid #263146}
  button.danger{background:#2a0f16; border-color:#5f1e29; color:#fecaca}
  button.warn{background:#3f2c0a; border-color:#854d0e; color:#fef3c7}
  .cards{ display:grid; grid-template-columns:1fr; gap:16px; margin:16px auto; }
  .card{ background:linear-gradient(180deg,#0f172a,#0c142a); border:1px solid #18243a; border-radius:18px; box-shadow:0 10px 30px rgba(0,0,0,.25), inset 0 1px 0 rgba(255,255,255,.02); padding: 0; }
  .card-header { padding: 16px; cursor: pointer; display: flex; justify-content: space-between; align-items: flex-start; gap: 16px; flex-wrap: nowrap;}
  .card-header:hover { background: rgba(255,255,255,0.03); }
  .card h2{margin:0; font-size:22px; flex-grow: 1;}
  .card-header .chapter-weight { font-size: 20px; font-weight: 700; color: var(--warn); flex-shrink: 0; }
  .card-content { padding: 0 16px 16px; display: grid; gap: 8px; display: none; }
  .row{ display:grid; grid-template-columns: auto auto 1fr auto auto auto; gap: 10px; align-items:center; padding:10px; border-radius:12px; border:1px solid #1a2742; background:#0b1527; font-size:16px; transition: all 0.2s ease; }
  .row.done{border-color:#1f3f2a; background:#0c1f14} .row.partial{border-color:#3a3214; background:#1c1609}
  .star-btn { background: none; border: none; color: var(--sub); font-size: 22px; cursor: pointer; padding: 0 5px; grid-column: 1; }
  .star-btn.active { color: var(--warn); }
  .row .lecture-weight { grid-column: 2; font-size: 14px; font-weight: 700; color: var(--warn); border-left: 2px solid var(--muted); padding-left: 10px; }
  .row .title{ font-weight:700; grid-column: 3; }
  .snooze-btn { grid-column: 4; background: var(--muted); color: var(--sub); border: 1px solid #2e3d55; padding: 6px 8px; border-radius: 8px; font-size: 16px; cursor: pointer; }
  .row label.chip { grid-column: span 1; }
  .row.snoozed { opacity: 0.4; background: #1a202c; } .row.snoozed .title { text-decoration: line-through; }
  .row.snoozed .snooze-btn { background: var(--warn); color: #000; border-color: var(--warn); }
  .chip{ display:inline-flex; align-items:center; gap:8px; background:#072437; color:#c3e4ff; border:1px solid #0b4a70; padding: 6px 10px; border-radius: 8px; font-size:14px; }
  .chip input{transform:scale(1.2); margin-right: 4px;}
  .modal-back{position:fixed; inset:0; background:rgba(2,6,23,.75); backdrop-filter:blur(6px); display:none; align-items:center; justify-content:center; z-index:100;}
  .modal{width:min(900px,92vw); max-height:80vh; overflow:auto; background:#0a1221; border:1px solid #1a2742; border-radius:16px; padding:16px;}
  .modal h3{margin:0 0 8px; font-size:22px} .divider{height:1px; background:#1d2a44; margin:12px 0}
  .footer{color:#9fb3ca; font-size:14px; margin:32px 0 16px; text-align: center; line-height: 1.6;}
  .footer a { color: var(--accent); text-decoration: none; } .footer a:hover { text-decoration: underline; }
  .form-group{margin-bottom:12px;} .form-group label{display:block; margin-bottom:4px; font-size:16px; color:var(--sub);}
  .form-group input, .form-group textarea, .form-group select{ width:100%; background:#0b1527; border:1px solid #1a2742; color:var(--text); padding:8px 12px; border-radius:8px; font-size:16px; }
  .form-group input[type="date"] { padding: 7px 12px; } .form-group textarea{ min-height: 150px; resize: vertical; }
  .planner-container { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px; justify-content: center; }
  .planner-box { background: #0c1a2e; border: 1px solid #173457; border-radius: 10px; padding: 12px 16px; flex-grow: 1; text-align: center; min-width: 150px; position: relative; }
  .planner-box.clickable { cursor: pointer; transition: background-color 0.2s ease; } .planner-box.clickable:hover { background: #173457; }
  .planner-box .label { font-size: 14px; color: var(--sub); margin-bottom: 4px; display: block; }
  .planner-box .value { font-size: 24px; font-weight: 700; color: var(--text); }
  .status-info-icon { font-size: 14px; color: var(--sub); margin-right: 5px; cursor: help; }
  .status-danger { border-color: var(--danger); background: #2a0f16; } .status-danger .value { color: var(--danger); }
  .status-good { border-color: var(--accent2); background: #0c1f14; } .status-good .value { color: var(--accent2); }
  .status-warn { border-color: var(--warn); background: #2a210f; } .status-warn .value { color: var(--warn); }
  .date-picker-hidden { position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer; border: none; }
  #mainAppContent { display: none; } #userSection { display: none; align-items: center; gap: 10px; }
  #userImg { width: 40px; height: 40px; border-radius: 50%; border: 2px solid var(--accent); }
  #userName { font-size: 14px; font-weight: bold; } #logoutBtn { font-size: 14px; padding: 6px 10px; }
  #loginBtn { display: block; }
  #aboutModal .modal-content { line-height: 1.7; }
  #aboutModal .modal-content h4 { color: var(--warn); margin-top: 1.5em; margin-bottom: 0.5em; }
  #aboutModal .modal-content ul { padding-right: 20px; }
  #aboutModal .modal-content code { background: var(--muted); padding: 2px 6px; border-radius: 4px; font-size: 0.9em; }
  .chapter-progress-container { width: 100px; height: 8px; background: #0b1220; border-radius: 999px; overflow: hidden; border: 1px solid #1f2a40; }
  .chapter-progress-bar { height: 100%; background: linear-gradient(90deg, var(--warn), #ffcc33); width: 0%; transition: width 0.3s ease; }
  .search-container { margin: 16px 0; }
  #searchInput { width: 100%; padding: 12px 16px; font-size: 16px; background: #0c1a2e; border: 1px solid #173457; border-radius: 10px; color: var(--text); }
  .row.highlight { background-color: rgba(245, 158, 11, 0.2); border-color: var(--warn); }
  #starredModal .card { margin-bottom: 12px; padding: 16px;}
  #starredModal .row { grid-template-columns: auto 1fr auto; gap: 15px;}
  #starredModal .completion-status { font-size: 14px; color: var(--sub); text-align: left;}
  #starredModal .completion-status.done { color: var(--accent2); }
  :root { --warn-rgb: 245, 158, 11; }
  #clockDateContainer {
    display: flex;
    gap: 10px;
    align-items: center;
    color: var(--sub);
    font-size: 14px;
    margin-right: auto;
    margin-left: 16px;
    white-space: nowrap;
  }
  #liveClock {
    font-weight: 700;
    color: var(--text);
    background: var(--muted);
    padding: 4px 10px;
    border-radius: 6px;
    font-size: 16px;
    letter-spacing: 1px;
  }
  #liveDate {
    font-size: 12px;
  }
  @media (max-width: 600px) {
    #clockDateContainer { display: none; }
  }
  .chapter-stats {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    font-size: 12px;
    color: var(--sub);
    margin-top: 10px;
    justify-content: flex-end;
  }
  .chapter-stats .stat-item {
    background: #0b1527;
    border: 1px solid #1a2742;
    padding: 2px 6px;
    border-radius: 6px;
  }
  .chapter-stats .stat-item span {
    font-weight: 700;
    color: var(--text);
  }
</style>
</head>
<body>

<header>
  <div class="header-container">
    <div style="display: flex; align-items: center; gap: 16px;">
        <h1 id="headerTitle">متابعة كورسات</h1>
    </div>
    <div id="clockDateContainer">
        <span id="liveDate"></span>
        <span id="liveClock"></span>
    </div>
    <div id="authSection" style="display: flex; align-items: center; gap: 10px; flex-shrink: 0;">
        <div id="userSection"> <img id="userImg" src="" alt="User"/> <span id="userName"></span> <button id="logoutBtn" class="secondary">خروج</button> </div>
        <button id="loginBtn" class="warn">تسجيل الدخول</button>
    </div>
  </div>
</header>

<main class="container" id="mainAppContent">
  <div class="subject-selector-container"> <select id="subjectSelector"></select> <button id="addSubjectBtn" class="warn">+</button> </div>

  <div class="planner-container">
    <div class="planner-box clickable status-warn" id="daysRemainingBox"> <span class="label">الأيام المتبقية</span> <b id="daysRemaining" class="value">-</b> <input type="date" id="datePickerInput" class="date-picker-hidden"> </div>
    <div class="planner-box clickable" id="totalHoursBox"> <span class="label">إجمالي الساعات</span> <b id="totalHours" class="value">-</b> </div>
    <div class="planner-box" id="remainingHoursBox"> <span class="label">الساعات المتبقية</span> <b id="remainingHours" class="value">-</b> </div>
    <div class="planner-box" id="plannerStatusBox"> <span class="label">حالتك <span id="planStatusInfo" class="status-info-icon" title="">❓</span></span> <b id="planStatus" class="value">-</b> </div>
    <div class="planner-box" id="plannerLecturesBox"> <span class="label">المطلوب يومياً (محاضرات)</span> <b id="planLecturesPerDay" class="value">-</b> </div>
    <div class="planner-box" id="plannerHoursBox"> <span class="label">المطلوب يومياً (ساعات)</span> <b id="planHoursPerDay" class="value">-</b> </div>
  </div>

  <div class="progress-stack"> <div> <div style="display: flex; justify-content: space-between;"> <span class="progress-label">إنجاز المحاضرات</span> <b id="globalBarPct" style="font-size: 14px;">0%</b> </div> <div class="bar"><span id="globalBar"></span></div> </div> <div> <div style="display: flex; justify-content: space-between;"> <span class="progress-label">شريط نسبة mcq البلوبرنت</span> <b id="blueprintBarPct" style="font-size: 14px; color: var(--warn);">0%</b> </div> <div class="bar" id="blueprintBar"><span id="blueprintBarSpan"></span></div> </div> </div>
  <div class="search-container"> <input type="search" id="searchInput" placeholder="ابحث عن محاضرة..."> </div>
  <div class="toolbar"> <button class="warn" id="manageDataBtn">إدارة</button> <button class="secondary" id="sortBtn">فرز</button> <button id="showRemaining">المتبقي</button> <button class="warn" id="showStarredBtn">المفضلة ⭐</button> <button class="secondary" id="expandAll">فتح الكل</button> <button class="secondary" id="collapseAll">طيّ الكل</button> <button id="showAboutBtn">شرح</button> </div>
  <div class="kpis" id="globalKpis" style="margin-top:16px"></div> <div class="cards" id="cards"></div>
  <div class="footer"> برمجة وتصميم: علي احمد | للتواصل: <a href="https://t.me/draliturki" target="_blank" rel="noopener noreferrer">@draliturki</a> <br> بياناتك محفوظة سحابياً. </div>
</main>

<div class="modal-back" id="remainingModalBack"> <div class="modal"> <h3>المتبقي</h3> <div id="remainingContainer"></div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="closeRemainingModal">إغلاق</button> </div> </div> </div>
<div class="modal-back" id="addSubjectModal"> <div class="modal" style="width: min(500px, 90vw);"> <h3>إضافة مادة</h3> <div class="form-group"> <label for="newSubjectNameInput">اسم المادة:</label> <input type="text" id="newSubjectNameInput"/> </div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="cancelAddSubject">إلغاء</button> <button id="saveNewSubjectBtn" style="margin-right: 8px;">حفظ</button> </div> </div> </div>
<div class="modal-back" id="manageModalBack"> <div class="modal" id="manageModalContent"> </div> </div>

<div class="modal-back" id="aboutModal">
  <div class="modal">
    <h3>شرح الموقع</h3>
    <div class="modal-content">
        <p>أهلاً بك في متتبع الكورسات!</p>
        <p>هذا التطبيق مصمم لمساعدتك على تنظيم دراستك وتتبع إنجازك بفاعلية.</p>

        <h4>📅 لوحة التحكم (Planner)</h4>
        <ul>
            <li><b>الأيام المتبقية:</b> اضغط على الصندوق لاختيار تاريخ الامتحان.</li>
            <li><b>إجمالي الساعات:</b> اضغط لإدخال الساعات الإجمالية للمادة (يدوياً).</li>
            <li><b>الساعات المتبقية:</b> تُحسب تلقائياً بناءً على الساعات التي تدخلها عند مشاهدة الفيديوهات.</li>
            <li><b>حالتك (❓):</b> يقارن إنجازك (البلوبرنت) بالوقت المنقضي.</li>
        </ul>

        <h4>⚙️ شريط الأدوات</h4>
        <ul>
            <li><b>إدارة:</b> لإضافة دكاترة، محاضرات، أو "إدارة ساعات الفصول".</li>
            <li><b>فرز:</b> لترتيب الجابترات حسب الأهمية (الوزن).</li>
            <li><b>المتبقي:</b> يعرض كل المحاضرات التي لم تكتمل بعد.</li>
            <li><b>المفضلة ⭐:</b> يعرض المحاضرات التي ميزتها بنجمة.</li>
        </ul>

        <h4>📚 المحاضرات والجابترات</h4>
        <ul>
            <li><b>رأس الجابتر:</b> يعرض لك إحصائيات مهمة (عدد المحاضرات، المتبقي منها، وإجمالي ساعات الجابتر، والمتبقي منها).</li>
            <li><b>☆/⭐:</b> لتمييز محاضرة (يتغير شكلها فوراً).</li>
            <li><b>🚫:</b> لتجاهل محاضرة وإخراجها من حسابات التقدم.</li>
            <li><b>🎬 فيديو:</b> عند الضغط لأول مرة، سيسألك عن عدد الساعات لحساب "الساعات المتبقية".</li>
            <li><b>📝 ملزمة:</b> تحديد هذا المربع يعتبر المحاضرة "مكتملة" ويضيفها لنسبة البلوبرنت.</li>
        </ul>
    </div>
    <div class="divider"></div>
    <div style="text-align: left;"> <button class="secondary" id="closeAboutModal">إغلاق</button> </div>
  </div>
</div>

<div class="modal-back" id="starredModal"> <div class="modal"> <h3>المفضلة ⭐</h3> <div id="starredContainer"></div> <div class="divider"></div> <div style="text-align: left;"> <button class="secondary" id="closeStarredModal">إغلاق</button> </div> </div> </div>


<script>
// --- Firebase Config & Init (No Change) ---
const firebaseConfig = {
  apiKey: "AIzaSyBizJxYxXnO5u7EIvw6bjfJ3gRbzMJjCdw",
  authDomain: "course-progressing.firebaseapp.com",
  projectId: "course-progressing",
  storageBucket: "course-progressing.appspot.com",
  messagingSenderId: "349314472435",
  appId: "1:349314472435:web:0dd7b5297e02342b4cda86",
};
try { firebase.initializeApp(firebaseConfig); console.log("Firebase Initialized."); }
catch (e) { console.error("Firebase init failed:", e); }
const auth = firebase.auth(); const db = firebase.firestore(); const googleProvider = new firebase.auth.GoogleAuthProvider();

// --- App State (No Change) ---
let currentUser = null; let userId = null; let userDocRef = null;
let appData = {}; let state = {}; let activeSubjectName = null;
let examDate = ""; let totalStudyDays = 0; let isSorted = false;

// --- DOM Elements (No Change) ---
let mainAppContent, userSection, userImg, userName, loginBtn, logoutBtn, cardsEl, subjectSelector,
    daysRemainingEl, daysRemainingBox, datePickerInput, totalHoursEl, totalHoursBox,
    remainingHoursEl, remainingHoursBox,
    plannerStatusBox, planStatus, planLecturesPerDay, globalBar, globalBarPct,
    blueprintBarSpan, blueprintBarPct, headerTitle, addSubjectModal, addSubjectBtn,
    manageModalBack, remainingModalBack, planHoursPerDay, planStatusInfo, aboutModal,
    searchInput, starredModal;

// --- Default Data (No Change) ---
function getDefaultData() {
    return {
        "المادة الافتراضية": {
            totalHours: 100,
            chapters: {
                "Chapter 1": 40.5,
                "Chapter 2": 59.5
            },
            chapterHours: {
                "Chapter 1": 10,
                "Chapter 2": 15
            },
            doctors: {
                "د. علي": [
                    { title: "Lec 1: Intro", video: "url", chapter: "Chapter 1", weight: 20.0 },
                    { title: "Lec 2: Advanced", video: "url", chapter: "Chapter 1", weight: 20.5 }
                ],
                "د. محمد": [
                    { title: "Lec 3: Basics", video: "url", chapter: "Chapter 2", weight: 59.5 }
                ]
            }
        }
    };
}

// --- Firestore Functions (No Change) ---
async function loadDataFromFirestore() { if (!userDocRef) return; console.log("Ld F:", userId); try { const dS = await userDocRef.get(); if (dS.exists) { const d = dS.data(); appData = d.appData || getDefaultData(); state = d.state || {}; const sK = Object.keys(appData); activeSubjectName = (d.activeSubjectName && appData[d.activeSubjectName]) ? d.activeSubjectName : (sK.length > 0 ? sK[0] : null); examDate = d.examDate || ""; totalStudyDays = d.totalStudyDays || 0; console.log("Ld ok."); } else { console.log("No data, default..."); appData = getDefaultData(); state = {}; activeSubjectName = Object.keys(appData)[0]; examDate = ""; totalStudyDays = 0; await saveAllDataToFirestore(); console.log("Default saved."); } } catch (e) { console.error("Err Ld:", e); appData = getDefaultData(); state = {}; activeSubjectName = Object.keys(appData)[0]; } }
async function saveAllDataToFirestore() { if (!userDocRef) return; console.log("Sv All..."); try { await userDocRef.set({ appData, state, activeSubjectName, examDate, totalStudyDays }, { merge: true }); console.log("All svd."); } catch (e) { console.error("Err sv all:", e); } }
async function saveAppData() { if (!userDocRef) return; try { await userDocRef.update({ appData }); console.log("AppD svd."); } catch (e) { console.error("Err sv AppD:", e); } }
async function saveProgress() { if (!userDocRef) return; try { await userDocRef.update({ state }); console.log("Prog svd."); } catch (e) { console.error("Err sv Prog:", e); } } // Added log
async function saveActiveSubject() { if (!userDocRef) return; try { await userDocRef.update({ activeSubjectName }); console.log("ActSubj svd."); } catch (e) { console.error("Err sv ActSubj:", e); } }
async function saveExamDateAndDays(newD, newTD) { if (!userDocRef) return; examDate = newD; totalStudyDays = newTD; try { await userDocRef.update({ examDate, totalStudyDays }); console.log("ExDate svd."); } catch (e) { console.error("Err sv ExDate:", e); } }

// --- Calculation Functions (No Change) ---
function isLectureComplete(rec){ return !!rec?.notes; }
function computeGlobal(subName, subData){
    let t = { l: 0, w: 0, dl: 0, dw: 0, sl: 0, sw: 0, v: 0, n: 0, dh: 0 };
    if(!subData || !subData.doctors) return {...t, al:0, aw:0, rl:0, rw:0, p:0, bp:0, vp:0, np:0, doneHours:0};

    Object.entries(subData.doctors).forEach(([dr, ls]) => {
        if (!Array.isArray(ls)) return;
        ls.forEach(l => {
            if (!l || typeof l !== 'object') return;
            const k = `${subName}||${l.chapter}||${l.title}`;
            const r = state[k] || { snoozed: !1 };

            t.l++;
            t.w += (l.weight || 0);

            if(r.video) t.v++;
            if(r.notes) t.n++;

            if(r.snoozed){
                t.sl++;
                t.sw += (l.weight || 0);
            } else {
                if(isLectureComplete(r)){ // Check notes completion
                    t.dl++;
                    t.dw += (l.weight || 0);
                    // Add hours ONLY if lecture is complete AND video is checked AND duration exists
                    if(r.video && r.videoDuration) {
                        t.dh += r.videoDuration;
                    }
                }
            }
        });
    });

    const al = t.l - t.sl;
    const aw = t.w - t.sw;
    const p = al > 0 ? (t.dl / al) * 100 : 0;
    const bp = aw > 0 ? (t.dw / aw) * 100 : 0;

    // console.log("Computed Global:", { ...t, doneHours: t.dh }); // DEBUG LOG
    return {
        ...t,
        activeLectures: al,
        activeWeight: parseFloat(aw.toFixed(2)),
        remainingLectures: al - t.dl,
        remainingWeight: parseFloat((aw - t.dw).toFixed(2)),
        pct: Math.round(p),
        blueprintPct: Math.round(bp),
        videoPct: al > 0 ? Math.round(t.v / al * 100) : 0,
        notesPct: al > 0 ? Math.round(t.n / al * 100) : 0,
        snoozedLectures: t.sl,
        doneHours: t.dh
    };
}


// --- Rendering Functions (No Change) ---
function renderGlobalHeader(subName, subData, computedGlobal){
    const g = computedGlobal || computeGlobal(subName, subData);
    if(subName){headerTitle.textContent=`متابعة: ${subName}`}else{headerTitle.textContent="متابعة كورسات"}
    globalBar.style.width=g.pct+'%';globalBarPct.textContent=g.pct+'%';
    blueprintBarSpan.style.width=g.blueprintPct+'%';blueprintBarPct.textContent=g.blueprintPct+'%';
    totalHoursEl.textContent=subData?.totalHours?`${subData.totalHours}`:"-";
    try{document.getElementById('globalKpis').innerHTML=`<span class=kpi>الكمية:${g.pct}%</span><span class="kpi status-warn" style="color:var(--warn)">البلوبرنت:${g.blueprintPct}%</span><span class=kpi>الباقي:${g.remainingLectures}/${g.activeLectures}</span><span class=kpi>المتجاهل:${g.snoozedLectures}</span>`}catch(e){/*ignore*/}
}
function render(subName, subData, searchTerm = "") {
    const globalStats = computeGlobal(subName, subData); // Compute once
    renderGlobalHeader(subName, subData, globalStats); // Pass computed stats

    const openCardIds = [];
    if (cardsEl) {
        cardsEl.querySelectorAll('.card-content').forEach(contentEl => {
            if (contentEl.style.display === 'grid') {
                openCardIds.push(contentEl.id);
            }
        });
    }

    cardsEl.innerHTML = "";

    if (!subData || !subData.doctors || Object.keys(subData.doctors).length === 0) {
        cardsEl.innerHTML = `<p style="text-align:center;">لا توجد بيانات لهذه المادة.</p>`;
        return;
    }
    const chapters = {};
    const chW = subData.chapters || {};
    Object.entries(subData.doctors).forEach(([dr, ls]) => {
        if (Array.isArray(ls)) {
            ls.forEach(l => {
                if (!l || typeof l !== 'object') { return; }
                const cn = l.chapter || "غير مصنف";
                if (!chapters[cn]) {
                    chapters[cn] = {
                        lectures: [],
                        totalWeight: chW[cn] || 0,
                        lectureCount: 0,
                        lecturesRemaining: 0,
                        hoursDone: 0
                    };
                }
                chapters[cn].lectures.push({ ...l, doctor: dr });
                const k = `${subName}||${cn}||${l.title}`;
                const rec = state[k] || { snoozed: !1 };
                if (!rec.snoozed) {
                    chapters[cn].lectureCount++;
                    if (!isLectureComplete(rec)) { // Depends only on notes
                        chapters[cn].lecturesRemaining++;
                    }
                    // Add hoursDone based on completion(notes) AND video check AND duration existence
                    if (isLectureComplete(rec) && rec.video && rec.videoDuration) {
                        chapters[cn].hoursDone += rec.videoDuration;
                    }
                }
            });
        }
    });
    let chA = Object.entries(chapters).map(([n, d]) => ({
        name: n,
        totalWeight: parseFloat(d.totalWeight.toFixed(2)),
        lectures: d.lectures,
        stats: {
            count: d.lectureCount,
            remaining: d.lecturesRemaining,
            hoursDone: d.hoursDone
        }
    }));
    if (isSorted) { chA.sort((a, b) => b.totalWeight - a.totalWeight); }
    let firstMatchElement = null;
    chA.forEach((ch, idx) => {
        let chapterCompletedWeight = 0;
        let chapterActiveWeight = 0;
        let hasVisibleLectures = false;
        const lecturesHTML = ch.lectures.map(l => {
            const k = `${subName}||${l.chapter}||${l.title}`;
            const rec = state[k] || { snoozed: !1, starred: !1 };
            const isMatch = searchTerm && l.title?.toLowerCase().includes(searchTerm.toLowerCase());
            if (searchTerm && !isMatch) return '';
            hasVisibleLectures = true;
            let rcs = "row";
            if (isLectureComplete(rec)) rcs += " done";
            else if (rec.video || rec.notes) rcs += " partial";
            if (rec.snoozed) rcs += " snoozed";
            if (isMatch) rcs += " highlight";
            if (isMatch && !firstMatchElement) { firstMatchElement = { key: k }; }
            if (!rec.snoozed) {
                chapterActiveWeight += (l.weight || 0);
                if (isLectureComplete(rec)) {
                    chapterCompletedWeight += (l.weight || 0);
                }
            }
            const starIcon = rec.starred ? '⭐' : '☆';
            return `<div class="${rcs}" data-key="${k}">
                      <button class="star-btn ${rec.starred?'active':''}" data-action="star" title="تمييز">${starIcon}</button>
                      <span class=lecture-weight>${l.weight || 0}%</span>
                      <div class=title>${l.title}</div>
                      <button class=snooze-btn data-action=snooze title=تجاهل>🚫</button>
                      <label class=chip><input type=checkbox data-action=video ${rec.video?'checked':''}> فيديو</label>
                      <label class=chip><input type=checkbox data-action=notes ${rec.notes?'checked':''}> ملزمة</label>
                    </div>`;
        }).join('');
        if (hasVisibleLectures) {
            const chapterBlueprintPct = chapterActiveWeight > 0 ? Math.round((chapterCompletedWeight / chapterActiveWeight) * 100) : 0;
            const chapterHoursTotal = subData.chapterHours?.[ch.name] || 0;
            const chapterHoursRemaining = Math.max(0, chapterHoursTotal - ch.stats.hoursDone);
            const card = document.createElement('section');
            card.className = "card";
            const cId = `c-${idx}`;
            card.innerHTML = `
              <div class=card-header data-collapse="${cId}">
                <h2>${ch.name}</h2>
                <div style="text-align: left; flex-shrink: 0; max-width: 250px;">
                  <div style="display: flex; gap: 16px; align-items: center; justify-content: flex-end;">
                    <span class=chapter-weight>${ch.totalWeight}%</span>
                    <div class="chapter-progress-container"><div class="chapter-progress-bar" style="width: ${chapterBlueprintPct}%;"></div></div>
                  </div>
                  <div class="chapter-stats">
                    <div class="stat-item">المحاضرات: <span>${ch.stats.count}</span></div>
                    <div class="stat-item">المتبقي: <span>${ch.stats.remaining}</span></div>
                    <div class="stat-item">الساعات: <span>${chapterHoursTotal.toFixed(1)}h</span></div>
                    <div class="stat-item">متبقي: <span>${chapterHoursRemaining.toFixed(1)}h</span></div>
                  </div>
                </div>
              </div>
              <div id="${cId}" class=card-content>${lecturesHTML}</div>`;
            cardsEl.appendChild(card);
            const listEl = card.querySelector(`#${cId}`);
            if(searchTerm || openCardIds.includes(cId)) {
                listEl.style.display = 'grid';
            }
            card.querySelector('[data-collapse]').addEventListener('click', (e) => {
                if (e.target.closest('button,input,label')) return;
                listEl.style.display = (listEl.style.display === 'none' || listEl.style.display === '') ? 'grid' : 'none'
            });
            listEl.querySelectorAll('.row button, .row input').forEach(el => {
                el.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const rowEl = e.target.closest('.row');
                    const title = rowEl.querySelector('.title').textContent;
                    const lectureData = ch.lectures.find(l => l.title === title);
                    if (lectureData) {
                        updateEntry(subName, lectureData, rowEl, el.dataset.action);
                    } else { console.error("Could not find lecture data for event target:", title); }
                })
            });
        }
    });
    if (firstMatchElement) {
        setTimeout(() => {
            const elementToScroll = cardsEl.querySelector(`.row[data-key="${firstMatchElement.key}"]`);
            if (elementToScroll) { elementToScroll.scrollIntoView({ behavior: 'smooth', block: 'center' }); }
        }, 100);
    } else if (searchTerm) {
        cardsEl.innerHTML = `<p style="text-align:center;">لا توجد نتائج بحث.</p>`;
    }
}

/*
=============================================================================
=== ✅ FINAL REVISED LOGIC: updateEntry Function ===
1.  Video Action: Ask for duration if missing. Set `requiresPlanUpdate = true` ONLY IF notes are currently checked (`isLectureComplete(rec)` is true).
2.  Notes Action: Always set `requiresPlanUpdate = true`.
3.  Snooze Action: Always set `requiresPlanUpdate = true`.
4.  Star Action: No plan update.
=============================================================================
*/
async function updateEntry(subName, lec, rowEl, action){
    const k = `${subName}||${lec.chapter}||${lec.title}`;
    const rec = state[k] || {snoozed:!1, starred: !1, videoDuration: null};
    let requiresPlanUpdate = false; // Assume no update needed initially

    // --- 1. Perform Action & Update State ---
    if(action === 'video'){
        const isChecking = rowEl.querySelector('[data-action=video]').checked;
        rec.video = isChecking; // Update video state first

        // Prompt logic (only on first check or if duration is missing)
        if (isChecking && (rec.videoDuration === null || rec.videoDuration === undefined)) {
            const durationInput = prompt(`كم ساعة استغرق فيديو "${lec.title}"؟`, "");
            if (durationInput !== null) { // Not cancelled
                const duration = parseFloat(durationInput);
                if (!isNaN(duration) && duration > 0) {
                    rec.videoDuration = duration;
                    // Check if lecture is complete NOW (based on notes)
                    if (isLectureComplete(rec)) { // isLectureComplete depends only on rec.notes
                         requiresPlanUpdate = true; // Duration added AND lecture is complete
                    }
                } else { // Invalid or empty input (treat empty as invalid)
                    alert("أدخل رقم صحيح (مثل 1.5).");
                    rowEl.querySelector('[data-action=video]').checked = false; // Revert UI
                    rec.video = false; // Revert state change
                    requiresPlanUpdate = false; // Ensure no update happens
                }
            } else { // User cancelled prompt
                rowEl.querySelector('[data-action=video]').checked = false; // Revert UI
                rec.video = false; // Revert state change
                requiresPlanUpdate = false; // Ensure no update happens
            }
        } else {
             // Duration already exists. Check if lecture is complete NOW (based on notes)
             if (isLectureComplete(rec)) { // isLectureComplete depends only on rec.notes
                 requiresPlanUpdate = true; // Toggle video for a complete lecture affects hours
             }
        }
    }
    else if(action === 'notes'){
        // Update notes state first
        rec.notes = rowEl.querySelector('[data-action=notes]').checked;
        // Always trigger update when notes change, as this defines completion and affects hour calculation
        requiresPlanUpdate = true;
    }
    else if(action === 'snooze'){
        rec.snoozed = !rec.snoozed;
        // Always trigger update when snooze changes
        requiresPlanUpdate = true;
    }
    else if(action === 'star'){
        rec.starred = !rec.starred;
        const starBtn = rowEl.querySelector('.star-btn');
        if(starBtn) {
            starBtn.classList.toggle('active', rec.starred);
            starBtn.textContent = rec.starred ? '⭐' : '☆';
        }
        // Starring doesn't affect plan
    }

    // --- 2. Save Block ---
    state[k] = rec;
    // Save progress after state is updated
    await saveProgress();

    // --- 3. UI Update Block (Row Appearance) ---
    // Update row colors based on the *new* state, except for star action
    if(action !== 'star') {
        rowEl.classList.remove('done','partial','snoozed');
        if(isLectureComplete(rec)) rowEl.classList.add('done'); // Depends only on rec.notes
        else if(rec.video || rec.notes) rowEl.classList.add('partial');
        if(rec.snoozed) rowEl.classList.add('snoozed');
    }

    // --- 4. Plan Update Block (Re-render if necessary) ---
    if(requiresPlanUpdate){
        console.log("Requires Plan Update triggered by action:", action, " New state:", rec); // Detailed log
        const actSub = activeSubjectName;
        // Re-render the whole list to update chapter stats AND global stats correctly
        render(actSub, appData[actSub], searchInput ? searchInput.value : "");
        // Update the global planner boxes
        updateDynamicPlan();
    } else {
         console.log("Requires Plan Update NOT triggered by action:", action, " New state:", rec); // Detailed log
    }
}



// --- Planning Functions (No Change) ---
function getDaysRemaining(targetDate = examDate) { if (!targetDate) return null; const today=new Date();today.setHours(0,0,0,0);const examD=new Date(targetDate);const diffT=examD.getTime()-today.getTime();const diffD=Math.ceil(diffT/(1e3*60*60*24));return diffD; }
function calculateAndDisplayDays() { const diffD=getDaysRemaining();daysRemainingBox.classList.remove('status-danger','status-good','status-warn');datePickerInput.value=examDate;if(diffD===null){daysRemainingEl.textContent="-"}else if(diffD<=0){daysRemainingEl.textContent="انتهى!";daysRemainingBox.classList.add('status-danger')}else if(diffD<=7){daysRemainingEl.textContent=diffD;daysRemainingBox.classList.add('status-danger')}else if(diffD<=30){daysRemainingEl.textContent=diffD;daysRemainingBox.classList.add('status-warn')}else{daysRemainingEl.textContent=diffD;daysRemainingBox.classList.add('status-good')} }
function updateDynamicPlan() {
    const subName=activeSubjectName;
    const subData=appData[subName];

    if(!subData){
        planStatus.textContent="-";
        planLecturesPerDay.textContent="-";
        if(planHoursPerDay)planHoursPerDay.textContent="-";
        if(remainingHoursEl)remainingHoursEl.textContent="-";
        if(planStatusInfo)planStatusInfo.title="";
        plannerStatusBox.classList.remove('status-danger','status-good','status-warn');
        return
    };

    const g = computeGlobal(subName,subData);
    const daysRem=getDaysRemaining();
    const totalDays=totalStudyDays;

    plannerStatusBox.classList.remove('status-danger','status-good','status-warn');

    if(daysRem===null||daysRem<=0){
        planLecturesPerDay.textContent="انتهى";
        if(planHoursPerDay)planHoursPerDay.textContent="انتهى";
        if(remainingHoursEl)remainingHoursEl.textContent="انتهى";
    }else if(g.remainingLectures===0){
        planLecturesPerDay.textContent="مكتمل 🎉";
        if(planHoursPerDay)planHoursPerDay.textContent="مكتمل 🎉";
        if(remainingHoursEl)remainingHoursEl.textContent="مكتمل 🎉";
    }else{
        const reqL=(g.remainingLectures/daysRem).toFixed(1);
        planLecturesPerDay.textContent=reqL;
        const totalHours = subData.totalHours || 0;
        const remainingEstimatedHours = Math.max(0, totalHours - g.doneHours);
        if(planHoursPerDay && totalHours > 0){
            const reqH=(remainingEstimatedHours/daysRem).toFixed(1);
            planHoursPerDay.textContent=isNaN(reqH)?'-':reqH;
            if (remainingHoursEl) {
                remainingHoursEl.textContent = remainingEstimatedHours.toFixed(1);
            }
        } else if(planHoursPerDay) {
            planHoursPerDay.textContent="-";
            if (remainingHoursEl) {
                remainingHoursEl.textContent = totalHours > 0 ? remainingEstimatedHours.toFixed(1) : "-";
            }
        }
    }

    let statusText="-";let statusClass='status-warn';

    if(totalDays<=0||daysRem===null||daysRem<0){
        // Error state handled below
    }else{
        const daysP=totalDays-daysRem;
        const expectPct=totalDays>0?Math.max(0,Math.min(100,(daysP/totalDays)*100)):0;
        const actualPct=g.blueprintPct;
        const diff=actualPct-expectPct;
        if(diff<-10){statusText="متأخر 😥";statusClass='status-danger';}
        else if(diff>10){statusText="متقدم 😎";statusClass='status-good';}
        else{statusText="على المسار 👍";statusClass='status-warn';}
    }
    planStatus.textContent=statusText;
    plannerStatusBox.className=`planner-box ${statusClass}`;

    if(planStatusInfo) {
        if(totalDays<=0||daysRem===null||daysRem<0) {
            planStatusInfo.title = "حدد تاريخ امتحان صحيح.";
        } else {
            planStatusInfo.title = "يقارن نسبة إنجاز البلوبرنت (الأهمية) بنسبة الوقت المنقضي. | متأخر 😥: إنجازك أقل بـ 10% من الوقت. | على المسار 👍: إنجازك في حدود 10% من الوقت. | متقدم 😎: إنجازك يتفوق بـ 10% على الوقت.";
        }
    }
}


// --- Modal Functions (No Change) ---
function openAddSubjectModal() { if (!currentUser) return; document.getElementById('newSubjectNameInput').value = ''; addSubjectModal.style.display = 'flex'; }
function closeAddSubjectModal() { addSubjectModal.style.display = 'none'; }
function handleSaveNewSubject() { if (!currentUser) return; const nameIn=document.getElementById('newSubjectNameInput');const name=nameIn.value.trim();if(name&&!appData[name]){appData[name]={totalHours:0,chapters:{},doctors:{}, chapterHours:{}}; saveAppData();activeSubjectName=name;saveActiveSubject();init();closeAddSubjectModal()}else if(!name){alert('أدخل اسم المادة.')}else{alert('المادة موجودة.')} }
async function handleSaveChapterHours(e) {
    if (!currentUser || !activeSubjectName) return;
    const input = e.target;
    const chName = input.dataset.chapterName;
    const hours = parseFloat(input.value);
    if (chName && !isNaN(hours) && hours >= 0) {
        if (!appData[activeSubjectName].chapterHours) {
            appData[activeSubjectName].chapterHours = {};
        }
        appData[activeSubjectName].chapterHours[chName] = hours;
        await saveAppData();
        console.log(`Saved ${hours}h for ${chName}`);
        render(activeSubjectName, appData[activeSubjectName], searchInput ? searchInput.value : "");
    }
}
function openManageModal() {
    if (!currentUser) return;
    const subName=activeSubjectName;
    if(!subName){alert("أضف مادة (+).");return}
    if (!appData[subName]) appData[subName] = {};
    if (!appData[subName].doctors) appData[subName].doctors = {};
    if (!appData[subName].chapterHours) appData[subName].chapterHours = {};
    const subData=appData[subName];
    const drs=Object.keys(subData.doctors);
    const mngCnt=document.getElementById('manageModalContent');
    if(!mngCnt)return console.error("Mng modal content !found");
    mngCnt.innerHTML=`
        <h3>إدارة (${subName})</h3>
        <p>إضافة دكاترة، محاضرات، وإدارة ساعات الفصول.</p>
        <div class=divider></div>
        <h4>إضافة دكتور/قسم</h4>
        <div class=form-group style="display:flex;gap:8px">
            <input type=text id=newDoctorName>
            <button id=addDoctorBtn>إضافة</button>
        </div>
        <div class=divider></div>
        <h4>إضافة محاضرات (دفعة)</h4>
        <div class=form-group>
            <label for=doctorSelect>اختر الدكتور</label>
            <select id=doctorSelect>${drs.map(d=>`<option value="${d}">${d}</option>`).join('')}</select>
        </div>
        <div class=form-group>
            <label>لصق المحاضرات (كل محاضرة في سطر)</label>
            <textarea id=bulkLectures placeholder="Lec 1: Intro\nLec 2: Basics..."></textarea>
            <button id=bulkAddBtn style="margin-top:8px">إضافة المحاضرات</button>
        </div>
        <div class="divider"></div>
        <h4>إدارة ساعات الفصول</h4>
        <p style="font-size:14px; color:var(--sub);">
            أدخل ساعات كل فصل. ستظهر هذه الساعات في رأس الجابتر.
            <br>
            (اضغط على صندوق "إجمالي الساعات" في الخارج لاقتراح المجموع أو لإدخال رقم يدوي).
        </p>
        <div id="chapterHoursContainer" style="display:grid; gap:10px; margin-top:12px; max-height: 250px; overflow-y: auto; background: #0b1527; padding: 10px; border-radius: 8px;">
        </div>
        <div class="divider"></div>
        <h4>إجراءات خطيرة</h4>
        <button class="danger" id="resetAllInModal">تفريغ بيانات التقدم</button>
        <div style="text-align:left;margin-top:24px">
            <button class=secondary id=closeManageModal>إغلاق</button>
        </div>
    `;
    const chapterHoursContainer = mngCnt.querySelector('#chapterHoursContainer');
    const chapters = new Set();
    Object.values(subData.doctors || {}).forEach(ls => {
        if(Array.isArray(ls)) {
            ls.forEach(l => chapters.add(l.chapter || "غير مصنف"));
        }
    });
    if (chapters.size === 0) {
        chapterHoursContainer.innerHTML = '<p style="font-size:14px; color:var(--sub);">لا توجد فصول لإضافة ساعات لها بعد. (أضف محاضرات أولاً)</p>';
    } else {
        chapters.forEach(chName => {
            const currentHours = subData.chapterHours?.[chName] || 0;
            const group = document.createElement('div');
            group.className = 'form-group';
            group.style.marginBottom = '8px';
            group.style.display = 'flex';
            group.style.alignItems = 'center';
            group.style.gap = '10px';
            group.innerHTML = `
                <label for="ch_hours_${chName}" style="flex-grow:1; margin-bottom:0; font-size: 15px;">${chName}</label>
                <input type="number" id="ch_hours_${chName}" value="${currentHours}" data-chapter-name="${chName}" style="width: 80px; text-align:center; padding: 6px 8px;">
                <span style="font-size: 14px; color: var(--sub);">ساعة</span>
            `;
            chapterHoursContainer.appendChild(group);
            group.querySelector('input[type="number"]').addEventListener('change', handleSaveChapterHours);
        });
    }
    mngCnt.querySelector('#addDoctorBtn').addEventListener('click',handleAddDoctor);
    mngCnt.querySelector('#bulkAddBtn').addEventListener('click',handleBulkAddLectures);
    mngCnt.querySelector('#closeManageModal').addEventListener('click',()=>manageModalBack.style.display='none');
    mngCnt.querySelector('#resetAllInModal').addEventListener('click', resetAllData);
    manageModalBack.style.display='flex';
}
function handleAddDoctor() { if(!currentUser)return; const subName=activeSubjectName;const inp=document.getElementById('newDoctorName');const name=inp.value.trim();if(name&&!appData[subName].doctors[name]){appData[subName].doctors[name]=[];saveAppData();init();openManageModal()}else{alert('الاسم موجود أو فارغ.')} }
function handleBulkAddLectures() { if(!currentUser)return; const subName=activeSubjectName;const dr=document.getElementById('doctorSelect').value;const txt=document.getElementById('bulkLectures');const tx=txt.value.trim();if(!dr||!tx){alert('اختر دكتور والصق المحاضرات.');return} const newLs=tx.split('\n').map(l=>l.trim()).filter(l=>l).map(t=>({title:t,video:"",chapter:"غير مصنف",weight:0}));if(newLs.length>0){const exLs=appData[subName].doctors[dr] || []; appData[subName].doctors[dr]=exLs.concat(newLs);saveAppData();txt.value='';alert(`تمت إضافة ${newLs.length}.`);init();openManageModal()} }
function setupRemainingModal() { if (!currentUser) return; const subName=activeSubjectName;if(!subName)return;const subData=appData[subName];const remCnt=document.getElementById('remainingContainer');if(!remCnt)return console.error("Rem container !found");remCnt.innerHTML="";let hasPend=!1;Object.entries(subData.doctors).forEach(([dr,ls])=>{const pend=ls.filter(t=>{const k=`${subName}||${t.chapter}||${t.title}`;const r=state[k]||{};return!isLectureComplete(r)&&!r.snoozed});if(pend.length===0)return;hasPend=!0;const blk=document.createElement('div');blk.className="card";blk.style.padding="16px";blk.style.marginBottom="12px";blk.innerHTML=`<h2 style="font-size:20px">${dr}</h2><div class=subinfo>متبقي:<b>${pend.length}</b></div>`;const list=document.createElement('div');list.style.display="grid";list.style.gap="10px";pend.forEach(l=>{const k=`${subName}||${l.chapter}||${l.title}`;const r=state[k]||{};const row=document.createElement('div');row.className="row";row.innerHTML=`<span class=lecture-weight>${l.weight}%</span><div class=title>${l.title}</div><div style="grid-column:span 3;font-size:14px;text-align:left">المطلوب: ${!r.video?'فيديو ❌':''} ${!r.notes?'ملزمة ❌':''}</div>`;list.appendChild(row)});blk.appendChild(list);remCnt.appendChild(blk)});if(!hasPend){remCnt.innerHTML=`<p style="text-align:center;font-size:20px">🎉<br>أكملت الكل.</p>`} remainingModalBack.style.display="flex"; }
function setupStarredModal() { if (!currentUser) return; const subName = activeSubjectName; if (!subName || !appData[subName] || !appData[subName].doctors) return; const starredContainer = document.getElementById('starredContainer'); if (!starredContainer) return console.error("Starred container !found"); starredContainer.innerHTML = ""; let hasStarred = false; const chaptersStarred = {}; Object.entries(appData[subName].doctors).forEach(([doctor, lectures]) => { if (Array.isArray(lectures)) { lectures.forEach(lecture => { const key = `${subName}||${lecture.chapter}||${lecture.title}`; const rec = state[key] || {}; if (rec.starred && !rec.snoozed) { hasStarred = true; const chapterName = lecture.chapter || "غير مصنف"; if (!chaptersStarred[chapterName]) { chaptersStarred[chapterName] = []; } chaptersStarred[chapterName].push({ ...lecture, status: rec }); } }); } }); if (!hasStarred) { starredContainer.innerHTML = `<p style="text-align:center;">لم تقم بتمييز أي محاضرات ⭐.</p>`; } else { Object.entries(chaptersStarred).forEach(([chapterName, starredLectures]) => { const chapterCard = document.createElement('div'); chapterCard.className = 'card'; chapterCard.innerHTML = `<h2 style="padding: 16px 16px 0;">${chapterName}</h2><div class="card-content" style="display: grid; padding: 16px;"> ${starredLectures.map(l => { const isDone = isLectureComplete(l.status); return `<div class="row"><span class="lecture-weight">${l.weight}%</span><div class="title">${l.title}</div><span class="completion-status ${isDone ? 'done' : ''}">${isDone ? 'مكتمل ✅' : 'غير مكتمل ❌'}</span></div>`; }).join('')}</div>`; starredContainer.appendChild(chapterCard); }); } starredModal.style.display = "flex"; }

// --- Auth Functions (No Change) ---
async function signInWithGoogle() { console.log("Attempting Google Sign-In..."); try { await auth.signInWithPopup(googleProvider); console.log("Sign-in popup initiated."); } catch (e) { console.error("Sign-in error:", e); if (e.code !== 'auth/popup-closed-by-user') {alert("خطأ الدخول: " + e.message);} else {console.log("Popup closed.");} } }
async function signOutUser() { console.log("Signing out..."); try { await auth.signOut(); } catch (e) { console.error("Sign-out error:", e); alert("خطأ الخروج: " + e.message); } }

// --- Reset Function (No Change) ---
async function resetAllData() {
    if (!currentUser || !userDocRef) return;
    if(confirm('متأكد؟ سيتم حذف كل بيانات التقدم (الصح، المفضلة، التجاهل) وتاريخ الامتحان. ستبقى المواد والمحاضرات كما هي.')){
        state = {};
        examDate = "";
        totalStudyDays = 0;
        try {
            await userDocRef.update({
                state: {},
                examDate: "",
                totalStudyDays: 0
            });
            isSorted = false;
            const sortBtn = document.getElementById('sortBtn');
            if (sortBtn) {
                sortBtn.textContent = "فرز حسب الأهمية";
                sortBtn.classList.remove('warn');
            }
            init();
            if(manageModalBack) manageModalBack.style.display = 'none';
            alert("تم تفريغ بيانات التقدم.");
        } catch (e) {
            console.error("Error resetting progress:", e);
            alert("حدث خطأ أثناء تفريغ البيانات.");
        }
    }
}

// --- Initialization Function (No Change) ---
function init(){ console.log("init() called."); if (!currentUser) { console.warn("Cannot init, user not logged in."); return; } const subjectKeys = Object.keys(appData); if (subjectKeys.length === 0) { render(null, null); subjectSelector.innerHTML = '<option>لا توجد مواد</option>'; } else { if (!activeSubjectName || !appData[activeSubjectName]) { activeSubjectName = subjectKeys[0]; } subjectSelector.innerHTML = ''; subjectKeys.forEach(subName => { const opt=document.createElement('option');opt.value=subName;opt.textContent=subName;if(subName===activeSubjectName)opt.selected=true; subjectSelector.appendChild(opt); }); render(activeSubjectName, appData[activeSubjectName], searchInput ? searchInput.value : ""); } calculateAndDisplayDays(); updateDynamicPlan(); console.log("init() finished."); }

// --- Clock Function (No Change) ---
function updateClock() {
    try {
        const now = new Date();
        const timeString = now.toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' });
        const dateString = now.toLocaleDateString('ar-EG', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
        const clockEl = document.getElementById('liveClock');
        const dateEl = document.getElementById('liveDate');
        if(clockEl) clockEl.textContent = timeString;
        if(dateEl) dateEl.textContent = dateString;
    } catch (e) {
        console.error("Error updating clock:", e);
    }
}
function startClock() {
    updateClock();
    setInterval(updateClock, 10000);
}

// --- Event Listeners Setup (No Change) ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM loaded. Fetching elements.");
    mainAppContent = document.getElementById('mainAppContent'); userSection = document.getElementById('userSection'); userImg = document.getElementById('userImg'); userName = document.getElementById('userName');
    loginBtn = document.getElementById('loginBtn'); logoutBtn = document.getElementById('logoutBtn'); cardsEl = document.getElementById('cards'); subjectSelector = document.getElementById('subjectSelector');
    daysRemainingEl = document.getElementById('daysRemaining'); daysRemainingBox = document.getElementById('daysRemainingBox'); datePickerInput = document.getElementById('datePickerInput');
    totalHoursEl = document.getElementById('totalHours'); totalHoursBox = document.getElementById('totalHoursBox');
    remainingHoursEl = document.getElementById('remainingHours');
    remainingHoursBox = document.getElementById('remainingHoursBox');
    plannerStatusBox = document.getElementById('plannerStatusBox');
    planStatus = document.getElementById('planStatus'); planLecturesPerDay = document.getElementById('planLecturesPerDay'); globalBar = document.getElementById('globalBar');
    globalBarPct = document.getElementById('globalBarPct'); blueprintBarSpan = document.getElementById('blueprintBarSpan'); blueprintBarPct = document.getElementById('blueprintBarPct');
    headerTitle = document.getElementById('headerTitle'); addSubjectModal = document.getElementById('addSubjectModal'); addSubjectBtn = document.getElementById('addSubjectBtn');
    manageModalBack = document.getElementById('manageModalBack'); remainingModalBack = document.getElementById('remainingModalBack');
    planHoursPerDay = document.getElementById('planHoursPerDay'); planStatusInfo = document.getElementById('planStatusInfo'); aboutModal = document.getElementById('aboutModal');
    searchInput = document.getElementById('searchInput'); starredModal = document.getElementById('starredModal');

    console.log("Elements fetched. Attaching base listeners.");
    startClock();

    if (loginBtn) { loginBtn.addEventListener('click', signInWithGoogle); console.log("Login listener attached."); } else { console.error("Login button !found"); }
    if (logoutBtn) logoutBtn.addEventListener('click', signOutUser);
    if (addSubjectBtn) addSubjectBtn.addEventListener('click', openAddSubjectModal);

    const saveSubjBtn = document.getElementById('saveNewSubjectBtn'); if (saveSubjBtn) saveSubjBtn.addEventListener('click', handleSaveNewSubject);
    const cancelSubjBtn = document.getElementById('cancelAddSubject'); if (cancelSubjBtn) cancelSubjBtn.addEventListener('click', closeAddSubjectModal);
    const manageBtn = document.getElementById('manageDataBtn'); if (manageBtn) manageBtn.addEventListener('click', openManageModal);
    const showRemBtn = document.getElementById('showRemaining'); if (showRemBtn) showRemBtn.addEventListener('click', setupRemainingModal);
    const closeRemBtn = document.getElementById('closeRemainingModal'); if (closeRemBtn) { closeRemBtn.addEventListener('click', () => remainingModalBack.style.display = "none"); }
    const expAllBtn = document.getElementById('expandAll'); if (expAllBtn) expAllBtn.addEventListener('click', ()=>{ document.querySelectorAll('.card-content').forEach(el=> el.style.display = 'grid'); });
    const colAllBtn = document.getElementById('collapseAll'); if (colAllBtn) colAllBtn.addEventListener('click', ()=>{ document.querySelectorAll('.card-content').forEach(el=> el.style.display = 'none'); });
    const sortBtn = document.getElementById('sortBtn'); if (sortBtn) sortBtn.addEventListener('click', ()=>{ isSorted = !isSorted; const btn = sortBtn; if (isSorted) { btn.textContent = "إلغاء الفرز"; btn.classList.add('warn'); } else { btn.textContent = "فرز حسب الأهمية"; btn.classList.remove('warn'); } if(currentUser) init(); });

    if (daysRemainingBox) daysRemainingBox.addEventListener('click', () => { if(!currentUser) return; try{ datePickerInput.showPicker(); } catch(e){console.warn("Picker err",e)} });
    if (datePickerInput) datePickerInput.addEventListener('change', (e) => { if(!currentUser) return; const newD = e.target.value; if(newD){ const tDays=getDaysRemaining(newD); saveExamDateAndDays(newD, tDays); calculateAndDisplayDays(); updateDynamicPlan(); } });

    if (totalHoursBox) totalHoursBox.addEventListener('click', () => {
        if(!currentUser) return;
        const subN=activeSubjectName;
        if(!subN)return;
        const subData = appData[subN];
        if (!subData) return;
        const allChapters = new Set();
        Object.values(subData.doctors || {}).forEach(ls => {
            if(Array.isArray(ls)) {
                ls.forEach(l => allChapters.add(l.chapter || "غير مصنف"));
            }
        });
        const chapterHours = subData.chapterHours || {};
        let totalFromChapters = 0;
        let allChaptersHaveHours = allChapters.size > 0;
        for (const chName of allChapters) {
            const hours = chapterHours[chName] || 0;
            if (hours <= 0) {
                allChaptersHaveHours = false;
            }
            totalFromChapters += hours;
        }
        let message;
        let defaultVal = subData?.totalHours || 0;
        if (allChaptersHaveHours) {
            message = `اكتمل إدخال ساعات كل الفصول!\nالمجموع هو: ${totalFromChapters.toFixed(1)} ساعة.\n\nهل تريد اعتماد هذا الرقم كـ "إجمالي الساعات"؟\n(للتعديل اليدوي، أدخل رقماً مختلفاً).`;
            defaultVal = totalFromChapters.toFixed(1);
        } else {
            message = `أدخل "إجمالي الساعات" يدوياً للمادة:\n\n(المجموع لن يتغير تلقائياً إلا بعد إدخال ساعات "لكل" الفصول).`;
        }
        const input = prompt(message, defaultVal);
        if (input === null) return;
        const newTotal = parseFloat(input);
        if (newTotal !== null && !isNaN(newTotal) && newTotal >= 0) {
            appData[subN].totalHours = newTotal;
            saveAppData();
            init();
        }
    });

    if (subjectSelector) subjectSelector.addEventListener('change', (e) => { if(!currentUser) return; const newS=e.target.value; activeSubjectName=newS; saveActiveSubject(); render(newS, appData[newS], searchInput ? searchInput.value : ""); updateDynamicPlan(); });
    const showAboutBtn = document.getElementById('showAboutBtn'); const closeAboutBtn = document.getElementById('closeAboutModal'); if (showAboutBtn && aboutModal && closeAboutBtn) { showAboutBtn.addEventListener('click', () => aboutModal.style.display = 'flex'); closeAboutBtn.addEventListener('click', () => aboutModal.style.display = 'none'); aboutModal.addEventListener('click', (e) => { if(e.target === aboutModal) aboutModal.style.display='none'; }); }
    if (searchInput) { searchInput.addEventListener('input', (e) => { if (currentUser && activeSubjectName) { render(activeSubjectName, appData[activeSubjectName], e.target.value); } }); }
    const showStarredBtn = document.getElementById('showStarredBtn'); const closeStarredBtn = document.getElementById('closeStarredModal'); if (showStarredBtn && starredModal && closeStarredBtn) { showStarredBtn.addEventListener('click', setupStarredModal); closeStarredBtn.addEventListener('click', () => starredModal.style.display = 'none'); starredModal.addEventListener('click', (e) => { if(e.target === starredModal) starredModal.style.display='none'; }); }

    console.log("All listeners potentially attached.");

    // --- Auth State Observer (No Change) ---
    auth.onAuthStateChanged(async (user) => {
      console.log("Auth state changed:", user ? user.uid : 'null');
      if (user) {
        currentUser = user; userId = user.uid; userDocRef = db.collection('users').doc(userId);
        console.log("User logged in. Loading data...");
        if (userImg && userName && userSection && loginBtn && mainAppContent) {
            userImg.src = user.photoURL || ''; userName.textContent = user.displayName || 'User';
            userSection.style.display = 'flex'; loginBtn.style.display = 'none';
            await loadDataFromFirestore();
            console.log("Data loaded, calling init...");
            init();
            mainAppContent.style.display = 'block';
        } else { console.error("Auth UI elements not found!"); }
      } else {
        currentUser = null; userId = null; userDocRef = null;
        console.log("User logged out.");
        if (userSection && loginBtn && mainAppContent && subjectSelector && cardsEl) {
            userSection.style.display = 'none'; loginBtn.style.display = 'block';
            mainAppContent.style.display = 'none';
            appData = {}; state = {}; activeSubjectName = null; examDate = ""; totalStudyDays = 0; isSorted = false;
            if(subjectSelector) subjectSelector.innerHTML = ''; if(cardsEl) cardsEl.innerHTML = '';
            try { renderGlobalHeader(null, null); updateDynamicPlan(); calculateAndDisplayDays(); } catch(e) {/*ignore*/}
            const sortBtn = document.getElementById('sortBtn'); if (sortBtn) { sortBtn.textContent = "فرز حسب الأهمية"; sortBtn.classList.remove('warn'); }
        } else { console.error("Auth or main UI elements not found!"); }
      }
    });
}); // End of DOMContentLoaded

</script>
</body>
</html>